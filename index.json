{
  "games/Joueur.cs.Games.Saloon.Cowboy.html": {
    "href": "games/Joueur.cs.Games.Saloon.Cowboy.html",
    "title": "Class Cowboy | C# Joueur Client",
    "keywords": "Class Cowboy A person on the map that can move around and interact within the saloon. Inheritance System.Object BaseGameObject GameObject Cowboy Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class Cowboy : GameObject Constructors Cowboy() Creates a new instance of Cowboy. Used during game initialization, do not call directly. Declaration protected Cowboy() Properties CanMove If the Cowboy can be moved this turn via its owner. Declaration public bool CanMove { get; protected set; } Property Value Type Description System.Boolean DrunkDirection The direction this Cowboy is moving while drunk. Will be 'North', 'East', 'South', or 'West' when drunk; or '' (empty string) when not drunk. Declaration public string DrunkDirection { get; protected set; } Property Value Type Description System.String Focus How much focus this Cowboy has. Different Jobs do different things with their Cowboy's focus. Declaration public int Focus { get; protected set; } Property Value Type Description System.Int32 Health How much health this Cowboy currently has. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 IsDead If this Cowboy is dead and has been removed from the game. Declaration public bool IsDead { get; protected set; } Property Value Type Description System.Boolean IsDrunk If this Cowboy is drunk, and will automatically walk. Declaration public bool IsDrunk { get; protected set; } Property Value Type Description System.Boolean Job The job that this Cowboy does, and dictates how they fight and interact within the Saloon. Declaration public string Job { get; protected set; } Property Value Type Description System.String Owner The Player that owns and can control this Cowboy. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Tile The Tile that this Cowboy is located on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile Tolerance How many times this unit has been drunk before taking their siesta and reseting this to 0. Declaration public int Tolerance { get; protected set; } Property Value Type Description System.Int32 TurnsBusy How many turns this unit has remaining before it is no longer busy and can act() or play() again. Declaration public int TurnsBusy { get; protected set; } Property Value Type Description System.Int32 Methods Act(Tile, String) Does their job's action on a Tile. Declaration public bool Act(Tile tile, string drunkDirection = \"\") Parameters Type Name Description Tile tile The Tile you want this Cowboy to act on. System.String drunkDirection The direction the bottle will cause drunk cowboys to be in, can be 'North', 'East', 'South', or 'West'. Returns Type Description System.Boolean True if the act worked, false otherwise. Move(Tile) Moves this Cowboy from its current Tile to an adjacent Tile. Declaration public bool Move(Tile tile) Parameters Type Name Description Tile tile The Tile you want to move this Cowboy to. Returns Type Description System.Boolean True if the move worked, false otherwise. Play(Furnishing) Sits down and plays a piano. Declaration public bool Play(Furnishing piano) Parameters Type Name Description Furnishing piano The Furnishing that is a piano you want to play. Returns Type Description System.Boolean True if the play worked, false otherwise."
  },
  "games/Joueur.cs.Games.Catastrophe.Job.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.Job.html",
    "title": "Class Job | C# Joueur Client",
    "keywords": "Class Job Information about a Unit's job. Inheritance System.Object BaseGameObject GameObject Job Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class Job : GameObject Constructors Job() Creates a new instance of Job. Used during game initialization, do not call directly. Declaration protected Job() Properties ActionCost The amount of energy this Job normally uses to perform its actions. Declaration public double ActionCost { get; protected set; } Property Value Type Description System.Double CarryLimit How many combined resources a Unit with this Job can hold at once. Declaration public int CarryLimit { get; protected set; } Property Value Type Description System.Int32 Moves The number of moves this Job can make per turn. Declaration public int Moves { get; protected set; } Property Value Type Description System.Int32 RegenRate The amount of energy normally regenerated when resting at a shelter. Declaration public double RegenRate { get; protected set; } Property Value Type Description System.Double Title The Job title. Declaration public string Title { get; protected set; } Property Value Type Description System.String Upkeep The amount of food per turn this Unit consumes. If there isn't enough food for every Unit, all Units become starved and do not consume food. Declaration public int Upkeep { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Anarchy.WeatherStation.html": {
    "href": "games/Joueur.cs.Games.Anarchy.WeatherStation.html",
    "title": "Class WeatherStation | C# Joueur Client",
    "keywords": "Class WeatherStation Can be bribed to change the next Forecast in some way. Inheritance System.Object BaseGameObject GameObject Building WeatherStation Inherited Members Building.Bribed Building.BuildingEast Building.BuildingNorth Building.BuildingSouth Building.BuildingWest Building.Fire Building.Health Building.IsHeadquarters Building.Owner Building.X Building.Y GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class WeatherStation : Building Constructors WeatherStation() Creates a new instance of WeatherStation. Used during game initialization, do not call directly. Declaration protected WeatherStation() Methods Intensify(Boolean) Bribe the weathermen to intensity the next Forecast by 1 or -1 Declaration public bool Intensify(bool negative = false) Parameters Type Name Description System.Boolean negative By default the intensity will be increased by 1, setting this to true decreases the intensity by 1. Returns Type Description System.Boolean True if the intensity was changed, false otherwise. Rotate(Boolean) Bribe the weathermen to change the direction of the next Forecast by rotating it clockwise or counterclockwise. Declaration public bool Rotate(bool counterclockwise = false) Parameters Type Name Description System.Boolean counterclockwise By default the direction will be rotated clockwise. If you set this to true we will rotate the forecast counterclockwise instead. Returns Type Description System.Boolean True if the rotation worked, false otherwise."
  },
  "games/Joueur.cs.Games.Anarchy.Warehouse.html": {
    "href": "games/Joueur.cs.Games.Anarchy.Warehouse.html",
    "title": "Class Warehouse | C# Joueur Client",
    "keywords": "Class Warehouse A typical abandoned warehouse... that anarchists hang out in and can be bribed to burn down Buildings. Inheritance System.Object BaseGameObject GameObject Building Warehouse Inherited Members Building.Bribed Building.BuildingEast Building.BuildingNorth Building.BuildingSouth Building.BuildingWest Building.Fire Building.Health Building.IsHeadquarters Building.Owner Building.X Building.Y GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class Warehouse : Building Constructors Warehouse() Creates a new instance of Warehouse. Used during game initialization, do not call directly. Declaration protected Warehouse() Properties Exposure How exposed the anarchists in this warehouse are to PoliceDepartments. Raises when bribed to ignite buildings, and drops each turn if not bribed. Declaration public int Exposure { get; protected set; } Property Value Type Description System.Int32 FireAdded The amount of fire added to buildings when bribed to ignite a building. Headquarters add more fire than normal Warehouses. Declaration public int FireAdded { get; protected set; } Property Value Type Description System.Int32 Methods Ignite(Building) Bribes the Warehouse to light a Building on fire. This adds this building's fireAdded to their fire, and then this building's exposure is increased based on the Manhatten distance between the two buildings. Declaration public int Ignite(Building building) Parameters Type Name Description Building building The Building you want to light on fire. Returns Type Description System.Int32 The exposure added to this Building's exposure. -1 is returned if there was an error."
  },
  "games/Joueur.cs.Games.Anarchy.GameObject.html": {
    "href": "games/Joueur.cs.Games.Anarchy.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Building Forecast Player Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Spiders.GameObject.html": {
    "href": "games/Joueur.cs.Games.Spiders.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Nest Player Spider Web Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Pirates.html": {
    "href": "games/Joueur.cs.Games.Pirates.html",
    "title": "Namespace Joueur.cs.Games.Pirates | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Pirates Rules Steal from merchants and become the most infamous pirate. The full game rules for Pirates can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Pirates. Game Steal from merchants and become the most infamous pirate. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Player A player in this game. Every AI controls one player. Port A port on a Tile. Tile A Tile in the game that makes up the 2D map grid. Unit A unit group in the game. This may consist of a ship and any number of crew."
  },
  "games/Joueur.cs.Games.Pirates.AI.html": {
    "href": "games/Joueur.cs.Games.Pirates.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Pirates. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Chess.html": {
    "href": "games/Joueur.cs.Games.Chess.html",
    "title": "Namespace Joueur.cs.Games.Chess | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Chess Rules The traditional 8x8 chess board with pieces. The full game rules for Chess can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Chess. Game The traditional 8x8 chess board with pieces. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Move Contains all details about a Piece's move in the game. Piece A chess piece. Player A player in this game. Every AI controls one player."
  },
  "games/Joueur.cs.Games.Chess.Player.html": {
    "href": "games/Joueur.cs.Games.Chess.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Chess Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Color The color (side) of this player. Either 'White' or 'Black', with the 'White' player having the first move. Declaration public string Color { get; protected set; } Property Value Type Description System.String InCheck True if this player is currently in check, and must move out of check, false otherwise. Declaration public bool InCheck { get; protected set; } Property Value Type Description System.Boolean Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean MadeMove If the Player has made their move for the turn. true means they can no longer move a Piece this turn. Declaration public bool MadeMove { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player Pieces All the uncaptured chess Pieces owned by this player. Declaration public IList<Piece> Pieces { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Piece > RankDirection The direction your Pieces must go along the rank axis until they reach the other side. Will be +1 if the Player is 'White', or -1 if the Player is 'Black'. Declaration public int RankDirection { get; protected set; } Property Value Type Description System.Int32 ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean"
  },
  "games/Joueur.cs.Games.Chess.Piece.html": {
    "href": "games/Joueur.cs.Games.Chess.Piece.html",
    "title": "Class Piece | C# Joueur Client",
    "keywords": "Class Piece A chess piece. Inheritance System.Object BaseGameObject GameObject Piece Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Chess Assembly : joueur-cs.dll Syntax public class Piece : GameObject Constructors Piece() Creates a new instance of Piece. Used during game initialization, do not call directly. Declaration protected Piece() Properties Captured When the Piece has been captured (removed from the board) this is true. Otherwise false. Declaration public bool Captured { get; protected set; } Property Value Type Description System.Boolean File The file (column) coordinate of the Piece represented as a letter [a-h], with 'a' starting at the left of the board. Declaration public string File { get; protected set; } Property Value Type Description System.String HasMoved If the Piece has moved from its starting position. Declaration public bool HasMoved { get; protected set; } Property Value Type Description System.Boolean Owner The player that controls this chess Piece. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Rank The rank (row) coordinate of the Piece represented as a number [1-8], with 1 starting at the bottom of the board. Declaration public int Rank { get; protected set; } Property Value Type Description System.Int32 Type The type of chess Piece this is, either 'King, 'Queen', 'Knight', 'Rook', 'Bishop', or 'Pawn'. Declaration public string Type { get; protected set; } Property Value Type Description System.String Methods Move(String, Int32, String) Moves the Piece from its current location to the given rank and file. Declaration public Move Move(string file, int rank, string promotionType = \"\") Parameters Type Name Description System.String file The file coordinate to move to. Must be [a-h]. System.Int32 rank The rank coordinate to move to. Must be [1-8]. System.String promotionType If this is a Pawn moving to the end of the board then this parameter is what to promote it to. When used must be 'Queen', 'Knight', 'Rook', or 'Bishop'. Returns Type Description Move The Move you did if successful, otherwise null if invalid. In addition if your move was invalid you will lose."
  },
  "games/Joueur.cs.Games.Catastrophe.Game.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game Convert as many humans to as you can to survive in this post-apocalyptic wasteland. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties CatEnergyMult The multiplier for the amount of energy regenerated when resting in a shelter with the cat overlord. Declaration public double CatEnergyMult { get; protected set; } Property Value Type Description System.Double CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 HarvestCooldown The amount of turns it takes for a Tile that was just harvested to grow food again. Declaration public int HarvestCooldown { get; protected set; } Property Value Type Description System.Int32 Jobs All the Jobs that Units can have in the game. Declaration public IList<Job> Jobs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Job > LowerHarvestAmount The amount that the harvest rate is lowered each season. Declaration public int LowerHarvestAmount { get; protected set; } Property Value Type Description System.Int32 MapHeight The number of Tiles in the map along the y (vertical) axis. Declaration public int MapHeight { get; protected set; } Property Value Type Description System.Int32 MapWidth The number of Tiles in the map along the x (horizontal) axis. Declaration public int MapWidth { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 MonumentCostMult The multiplier for the cost of actions when performing them in range of a monument. Does not effect pickup cost. Declaration public double MonumentCostMult { get; protected set; } Property Value Type Description System.Double MonumentMaterials The number of materials in a monument. Declaration public int MonumentMaterials { get; protected set; } Property Value Type Description System.Int32 NeutralMaterials The number of materials in a neutral Structure. Declaration public int NeutralMaterials { get; protected set; } Property Value Type Description System.Int32 Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String ShelterMaterials The number of materials in a shelter. Declaration public int ShelterMaterials { get; protected set; } Property Value Type Description System.Int32 StarvingEnergyMult The multiplier for the amount of energy regenerated when resting while starving. Declaration public double StarvingEnergyMult { get; protected set; } Property Value Type Description System.Double Structures Every Structure in the game. Declaration public IList<Structure> Structures { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Structure > Tiles All the tiles in the map, stored in Row-major order. Use x + y * mapWidth to access the correct index. Declaration public IList<Tile> Tiles { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Tile > TurnsBetweenHarvests After a food tile is harvested, the number of turns before it can be harvested again. Declaration public int TurnsBetweenHarvests { get; protected set; } Property Value Type Description System.Int32 TurnsToCreateHuman The number of turns between fresh humans being spawned on the road. Declaration public int TurnsToCreateHuman { get; protected set; } Property Value Type Description System.Int32 TurnsToLowerHarvest The number of turns before the harvest rate is lowered (length of each season basically). Declaration public int TurnsToLowerHarvest { get; protected set; } Property Value Type Description System.Int32 Units Every Unit in the game. Declaration public IList<Unit> Units { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Unit > WallMaterials The number of materials in a wall. Declaration public int WallMaterials { get; protected set; } Property Value Type Description System.Int32 Methods GetTileAt(Int32, Int32) Gets the Tile at a specified (x, y) position Declaration public Tile GetTileAt(int x, int y) Parameters Type Name Description System.Int32 x integer between 0 and the MapWidth System.Int32 y integer between 0 and the MapHeight Returns Type Description Tile the Tile at (x, y) or null if out of bounds"
  },
  "games/Joueur.cs.ErrorHandler.ErrorCode.html": {
    "href": "games/Joueur.cs.ErrorHandler.ErrorCode.html",
    "title": "Enum ErrorHandler.ErrorCode | C# Joueur Client",
    "keywords": "Enum ErrorHandler.ErrorCode Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public enum ErrorCode Fields Name Description AI_ERRORED CANNOT_READ_SOCKET COULD_NOT_CONNECT DELTA_MERGE_FAILURE DISCONNECTED_UNEXPECTEDLY FATAL_EVENT GAME_NOT_FOUND INVALID_ARGS MALFORMED_JSON NONE REFLECTION_FAILED SERVER_TIMEOUT UNAUTHENTICATED UNKNOWN_EVENT_FROM_SERVER"
  },
  "games/Joueur.cs.BaseGame.html": {
    "href": "games/Joueur.cs.BaseGame.html",
    "title": "Class BaseGame | C# Joueur Client",
    "keywords": "Class BaseGame Inheritance System.Object BaseGame Game Game Game Game Game Game Game Game Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public abstract class BaseGame Constructors BaseGame() Declaration public BaseGame() Properties GameObjects A mapping of every game object's ID to the actual game object. Primarily used by the server and client to easily refer to the game objects via ID. Declaration public IDictionary<string, BaseGameObject> GameObjects { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , BaseGameObject > Name The name of the game. Declaration public string Name { get; protected set; } Property Value Type Description System.String"
  },
  "games/Joueur.cs.html": {
    "href": "games/Joueur.cs.html",
    "title": "Namespace Joueur.cs | C# Joueur Client",
    "keywords": "Namespace Joueur.cs Classes ArgParser ArgParser.Argument BaseAI BaseGame BaseGameObject Client ErrorHandler GameManager Enums ArgParser.Argument.Store ErrorHandler.ErrorCode"
  },
  "games/Joueur.cs.Games.Stumped.html": {
    "href": "games/Joueur.cs.Games.Stumped.html",
    "title": "Namespace Joueur.cs.Games.Stumped | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Stumped Rules Gather branches and build up your lodge as beavers fight to survive. The full game rules for Stumped can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Stumped. Beaver A beaver in the game. Game Gather branches and build up your lodge as beavers fight to survive. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Job Information about a beaver's job. Player A player in this game. Every AI controls one player. Spawner A resource spawner that generates branches or food. Tile A Tile in the game that makes up the 2D map grid."
  },
  "games/Joueur.cs.Games.Stumped.GameObject.html": {
    "href": "games/Joueur.cs.Games.Stumped.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Beaver Job Player Spawner Tile Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Stumped.Game.html": {
    "href": "games/Joueur.cs.Games.Stumped.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game Gather branches and build up your lodge as beavers fight to survive. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties Beavers Every Beaver in the game. Declaration public IList<Beaver> Beavers { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Beaver > CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 FreeBeaversCount When a Player has less Beavers than this number, then recruiting other Beavers is free. Declaration public int FreeBeaversCount { get; protected set; } Property Value Type Description System.Int32 Jobs All the Jobs that Beavers can have in the game. Declaration public IList<Job> Jobs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Job > LodgeCostConstant Constant number used to calculate what it costs to spawn a new lodge. Declaration public double LodgeCostConstant { get; protected set; } Property Value Type Description System.Double LodgesToWin How many lodges must be owned by a Player at once to win the game. Declaration public int LodgesToWin { get; protected set; } Property Value Type Description System.Int32 MapHeight The number of Tiles in the map along the y (vertical) axis. Declaration public int MapHeight { get; protected set; } Property Value Type Description System.Int32 MapWidth The number of Tiles in the map along the x (horizontal) axis. Declaration public int MapWidth { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String Spawner Every Spawner in the game. Declaration public IList<Spawner> Spawner { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Spawner > SpawnerHarvestConstant Constant number used to calculate how many branches/food Beavers harvest from Spawners. Declaration public double SpawnerHarvestConstant { get; protected set; } Property Value Type Description System.Double SpawnerTypes All the types of Spawners in the game. Declaration public IList<string> SpawnerTypes { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Tiles All the tiles in the map, stored in Row-major order. Use x + y * mapWidth to access the correct index. Declaration public IList<Tile> Tiles { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Tile > Methods GetTileAt(Int32, Int32) Gets the Tile at a specified (x, y) position Declaration public Tile GetTileAt(int x, int y) Parameters Type Name Description System.Int32 x integer between 0 and the MapWidth System.Int32 y integer between 0 and the MapHeight Returns Type Description Tile the Tile at (x, y) or null if out of bounds"
  },
  "games/Joueur.cs.Games.Stumped.Beaver.html": {
    "href": "games/Joueur.cs.Games.Stumped.Beaver.html",
    "title": "Class Beaver | C# Joueur Client",
    "keywords": "Class Beaver A beaver in the game. Inheritance System.Object BaseGameObject GameObject Beaver Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class Beaver : GameObject Constructors Beaver() Creates a new instance of Beaver. Used during game initialization, do not call directly. Declaration protected Beaver() Properties Actions The number of actions remaining for the Beaver this turn. Declaration public int Actions { get; protected set; } Property Value Type Description System.Int32 Branches The amount of branches this Beaver is holding. Declaration public int Branches { get; protected set; } Property Value Type Description System.Int32 Food The amount of food this Beaver is holding. Declaration public int Food { get; protected set; } Property Value Type Description System.Int32 Health How much health this Beaver has left. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 Job The Job this Beaver was recruited to do. Declaration public Job Job { get; protected set; } Property Value Type Description Job Moves How many moves this Beaver has left this turn. Declaration public int Moves { get; protected set; } Property Value Type Description System.Int32 Owner The Player that owns and can control this Beaver. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Recruited True if the Beaver has finished being recruited and can do things, False otherwise. Declaration public bool Recruited { get; protected set; } Property Value Type Description System.Boolean Tile The Tile this Beaver is on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile TurnsDistracted Number of turns this Beaver is distracted for (0 means not distracted). Declaration public int TurnsDistracted { get; protected set; } Property Value Type Description System.Int32 Methods Attack(Beaver) Attacks another adjacent beaver. Declaration public bool Attack(Beaver beaver) Parameters Type Name Description Beaver beaver The Beaver to attack. Must be on an adjacent Tile. Returns Type Description System.Boolean True if successfully attacked, false otherwise. BuildLodge() Builds a lodge on the Beavers current Tile. Declaration public bool BuildLodge() Returns Type Description System.Boolean True if successfully built a lodge, false otherwise. Drop(Tile, String, Int32) Drops some of the given resource on the beaver's Tile. Declaration public bool Drop(Tile tile, string resource, int amount = 0) Parameters Type Name Description Tile tile The Tile to drop branches/food on. Must be the same Tile that the Beaver is on, or an adjacent one. System.String resource The type of resource to drop ('branch' or 'food'). System.Int32 amount The amount of the resource to drop, numbers <= 0 will drop all the resource type. Returns Type Description System.Boolean True if successfully dropped the resource, false otherwise. Harvest(Spawner) Harvests the branches or food from a Spawner on an adjacent Tile. Declaration public bool Harvest(Spawner spawner) Parameters Type Name Description Spawner spawner The Spawner you want to harvest. Must be on an adjacent Tile. Returns Type Description System.Boolean True if successfully harvested, false otherwise. Move(Tile) Moves this Beaver from its current Tile to an adjacent Tile. Declaration public bool Move(Tile tile) Parameters Type Name Description Tile tile The Tile this Beaver should move to. Returns Type Description System.Boolean True if the move worked, false otherwise. Pickup(Tile, String, Int32) Picks up some branches or food on the beaver's tile. Declaration public bool Pickup(Tile tile, string resource, int amount = 0) Parameters Type Name Description Tile tile The Tile to pickup branches/food from. Must be the same Tile that the Beaver is on, or an adjacent one. System.String resource The type of resource to pickup ('branch' or 'food'). System.Int32 amount The amount of the resource to drop, numbers <= 0 will pickup all of the resource type. Returns Type Description System.Boolean True if successfully picked up a resource, false otherwise."
  },
  "games/Joueur.cs.Games.Stumped.AI.html": {
    "href": "games/Joueur.cs.Games.Stumped.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Stumped. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Spiders.Spiderling.html": {
    "href": "games/Joueur.cs.Games.Spiders.Spiderling.html",
    "title": "Class Spiderling | C# Joueur Client",
    "keywords": "Class Spiderling A Spider spawned by the BroodMother. Inheritance System.Object BaseGameObject GameObject Spider Spiderling Cutter Spitter Weaver Inherited Members Spider.IsDead Spider.Nest Spider.Owner GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Spiderling : Spider Constructors Spiderling() Creates a new instance of Spiderling. Used during game initialization, do not call directly. Declaration protected Spiderling() Properties Busy When empty string this Spiderling is not busy, and can act. Otherwise a string representing what it is busy with, e.g. 'Moving', 'Attacking'. Declaration public string Busy { get; protected set; } Property Value Type Description System.String MovingOnWeb The Web this Spiderling is using to move. Null if it is not moving. Declaration public Web MovingOnWeb { get; protected set; } Property Value Type Description Web MovingToNest The Nest this Spiderling is moving to. Null if it is not moving. Declaration public Nest MovingToNest { get; protected set; } Property Value Type Description Nest NumberOfCoworkers The number of Spiderlings busy with the same work this Spiderling is doing, speeding up the task. Declaration public int NumberOfCoworkers { get; protected set; } Property Value Type Description System.Int32 WorkRemaining How much work needs to be done for this Spiderling to finish being busy. See docs for the Work forumla. Declaration public double WorkRemaining { get; protected set; } Property Value Type Description System.Double Methods Attack(Spiderling) Attacks another Spiderling Declaration public bool Attack(Spiderling spiderling) Parameters Type Name Description Spiderling spiderling The Spiderling to attack. Returns Type Description System.Boolean True if the attack was successful, false otherwise. Move(Web) Starts moving the Spiderling across a Web to another Nest. Declaration public bool Move(Web web) Parameters Type Name Description Web web The Web you want to move across to the other Nest. Returns Type Description System.Boolean True if the move was successful, false otherwise."
  },
  "games/Joueur.cs.Games.Spiders.Spider.html": {
    "href": "games/Joueur.cs.Games.Spiders.Spider.html",
    "title": "Class Spider | C# Joueur Client",
    "keywords": "Class Spider A Spider in the game. The most basic unit. Inheritance System.Object BaseGameObject GameObject Spider BroodMother Spiderling Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Spider : GameObject Constructors Spider() Creates a new instance of Spider. Used during game initialization, do not call directly. Declaration protected Spider() Properties IsDead If this Spider is dead and has been removed from the game. Declaration public bool IsDead { get; protected set; } Property Value Type Description System.Boolean Nest The Nest that this Spider is currently on. Null when moving on a Web. Declaration public Nest Nest { get; protected set; } Property Value Type Description Nest Owner The Player that owns this Spider, and can command it. Declaration public Player Owner { get; protected set; } Property Value Type Description Player"
  },
  "games/Joueur.cs.Games.Spiders.Player.html": {
    "href": "games/Joueur.cs.Games.Spiders.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties BroodMother This player's BroodMother. If it dies they lose the game. Declaration public BroodMother BroodMother { get; protected set; } Property Value Type Description BroodMother ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean MaxSpiderlings The max number of Spiderlings players can spawn. Declaration public int MaxSpiderlings { get; protected set; } Property Value Type Description System.Int32 Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String Spiders All the Spiders owned by this player. Declaration public IList<Spider> Spiders { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Spider > TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean"
  },
  "games/Joueur.cs.Games.Spiders.Nest.html": {
    "href": "games/Joueur.cs.Games.Spiders.Nest.html",
    "title": "Class Nest | C# Joueur Client",
    "keywords": "Class Nest A location (node) connected to other Nests via Webs (edges) in the game that Spiders can converge on, regardless of owner. Inheritance System.Object BaseGameObject GameObject Nest Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Nest : GameObject Constructors Nest() Creates a new instance of Nest. Used during game initialization, do not call directly. Declaration protected Nest() Properties Spiders All the Spiders currently located on this Nest. Declaration public IList<Spider> Spiders { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Spider > Webs Webs that connect to this Nest. Declaration public IList<Web> Webs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Web > X The X coordinate of the Nest. Used for distance calculations. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The Y coordinate of the Nest. Used for distance calculations. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Pirates.GameObject.html": {
    "href": "games/Joueur.cs.Games.Pirates.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Player Port Tile Unit Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Pirates.Game.html": {
    "href": "games/Joueur.cs.Games.Pirates.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game Steal from merchants and become the most infamous pirate. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties BuryInterestRate The rate buried gold increases each turn. Declaration public double BuryInterestRate { get; protected set; } Property Value Type Description System.Double CrewCost How much gold it costs to construct a single crew. Declaration public int CrewCost { get; protected set; } Property Value Type Description System.Int32 CrewDamage How much damage crew deal to each other. Declaration public int CrewDamage { get; protected set; } Property Value Type Description System.Int32 CrewHealth The maximum amount of health a crew member can have. Declaration public int CrewHealth { get; protected set; } Property Value Type Description System.Int32 CrewMoves The number of moves Units with only crew are given each turn. Declaration public int CrewMoves { get; protected set; } Property Value Type Description System.Int32 CrewRange A crew's attack range. Range is circular. Declaration public double CrewRange { get; protected set; } Property Value Type Description System.Double CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 HealFactor How much health a Unit recovers when they rest. Declaration public double HealFactor { get; protected set; } Property Value Type Description System.Double MapHeight The number of Tiles in the map along the y (vertical) axis. Declaration public int MapHeight { get; protected set; } Property Value Type Description System.Int32 MapWidth The number of Tiles in the map along the x (horizontal) axis. Declaration public int MapWidth { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 MerchantGoldRate How much gold merchant Ports get each turn. Declaration public double MerchantGoldRate { get; protected set; } Property Value Type Description System.Double MerchantInterestRate When a merchant ship spawns, the amount of additional gold it has relative to the Port's investment. Declaration public double MerchantInterestRate { get; protected set; } Property Value Type Description System.Double MinInterestDistance The Euclidean distance buried gold must be from the Player's Port to accumulate interest. Declaration public double MinInterestDistance { get; protected set; } Property Value Type Description System.Double Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Ports Every Port in the game. Merchant ports have owner set to null. Declaration public IList<Port> Ports { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Port > RestRange How far a Unit can be from a Port to rest. Range is circular. Declaration public double RestRange { get; protected set; } Property Value Type Description System.Double Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String ShipCost How much gold it costs to construct a ship. Declaration public int ShipCost { get; protected set; } Property Value Type Description System.Int32 ShipDamage How much damage ships deal to ships and ports. Declaration public int ShipDamage { get; protected set; } Property Value Type Description System.Int32 ShipHealth The maximum amount of health a ship can have. Declaration public int ShipHealth { get; protected set; } Property Value Type Description System.Int32 ShipMoves The number of moves Units with ships are given each turn. Declaration public int ShipMoves { get; protected set; } Property Value Type Description System.Int32 ShipRange A ship's attack range. Range is circular. Declaration public double ShipRange { get; protected set; } Property Value Type Description System.Double Tiles All the tiles in the map, stored in Row-major order. Use x + y * mapWidth to access the correct index. Declaration public IList<Tile> Tiles { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Tile > Units Every Unit in the game. Merchant units have targetPort set to a port. Declaration public IList<Unit> Units { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Unit > Methods GetTileAt(Int32, Int32) Gets the Tile at a specified (x, y) position Declaration public Tile GetTileAt(int x, int y) Parameters Type Name Description System.Int32 x integer between 0 and the MapWidth System.Int32 y integer between 0 and the MapHeight Returns Type Description Tile the Tile at (x, y) or null if out of bounds"
  },
  "games/Joueur.cs.Games.Chess.Move.html": {
    "href": "games/Joueur.cs.Games.Chess.Move.html",
    "title": "Class Move | C# Joueur Client",
    "keywords": "Class Move Contains all details about a Piece's move in the game. Inheritance System.Object BaseGameObject GameObject Move Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Chess Assembly : joueur-cs.dll Syntax public class Move : GameObject Constructors Move() Creates a new instance of Move. Used during game initialization, do not call directly. Declaration protected Move() Properties Captured The Piece captured by this Move, null if no capture. Declaration public Piece Captured { get; protected set; } Property Value Type Description Piece FromFile The file the Piece moved from. Declaration public string FromFile { get; protected set; } Property Value Type Description System.String FromRank The rank the Piece moved from. Declaration public int FromRank { get; protected set; } Property Value Type Description System.Int32 Piece The Piece that was moved. Declaration public Piece Piece { get; protected set; } Property Value Type Description Piece Promotion The Piece type this Move's Piece was promoted to from a Pawn, empty string if no promotion occurred. Declaration public string Promotion { get; protected set; } Property Value Type Description System.String San The standard algebraic notation (SAN) representation of the move. Declaration public string San { get; protected set; } Property Value Type Description System.String ToFile The file the Piece moved to. Declaration public string ToFile { get; protected set; } Property Value Type Description System.String ToRank The rank the Piece moved to. Declaration public int ToRank { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Chess.GameObject.html": {
    "href": "games/Joueur.cs.Games.Chess.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Move Piece Player Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Chess Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Checkers.html": {
    "href": "games/Joueur.cs.Games.Checkers.html",
    "title": "Namespace Joueur.cs.Games.Checkers | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Checkers Rules The simple version of American Checkers. An 8x8 board with 12 checkers on each side that must move diagonally to the opposing side until kinged. The full game rules for Checkers can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Checkers. Checker A checker on the game board. Game The simple version of American Checkers. An 8x8 board with 12 checkers on each side that must move diagonally to the opposing side until kinged. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Player A player in this game. Every AI controls one player."
  },
  "games/Joueur.cs.Games.Checkers.Player.html": {
    "href": "games/Joueur.cs.Games.Checkers.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Checkers Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties Checkers All the checkers currently in the game owned by this player. Declaration public IList<Checker> Checkers { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Checker > ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean YDirection The direction your checkers must go along the y-axis until kinged. Declaration public int YDirection { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Catastrophe.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.html",
    "title": "Namespace Joueur.cs.Games.Catastrophe | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Catastrophe Rules Convert as many humans to as you can to survive in this post-apocalyptic wasteland. The full game rules for Catastrophe can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Catastrophe. Game Convert as many humans to as you can to survive in this post-apocalyptic wasteland. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Job Information about a Unit's job. Player A player in this game. Every AI controls one player. Structure A structure on a Tile. Tile A Tile in the game that makes up the 2D map grid. Unit A unit in the game."
  },
  "games/Joueur.cs.Games.Catastrophe.Unit.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.Unit.html",
    "title": "Class Unit | C# Joueur Client",
    "keywords": "Class Unit A unit in the game. Inheritance System.Object BaseGameObject GameObject Unit Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class Unit : GameObject Constructors Unit() Creates a new instance of Unit. Used during game initialization, do not call directly. Declaration protected Unit() Properties Acted Whether this Unit has performed its action this turn. Declaration public bool Acted { get; protected set; } Property Value Type Description System.Boolean Energy The amount of energy this Unit has (from 0.0 to 100.0). Declaration public double Energy { get; protected set; } Property Value Type Description System.Double Food The amount of food this Unit is holding. Declaration public int Food { get; protected set; } Property Value Type Description System.Int32 Job The Job this Unit was recruited to do. Declaration public Job Job { get; protected set; } Property Value Type Description Job Materials The amount of materials this Unit is holding. Declaration public int Materials { get; protected set; } Property Value Type Description System.Int32 MovementTarget The tile this Unit is moving to. This only applies to neutral fresh humans spawned on the road. Otherwise, the tile this Unit is on. Declaration public Tile MovementTarget { get; protected set; } Property Value Type Description Tile Moves How many moves this Unit has left this turn. Declaration public int Moves { get; protected set; } Property Value Type Description System.Int32 Owner The Player that owns and can control this Unit, or null if the Unit is neutral. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Squad The Units in the same squad as this Unit. Units in the same squad attack and defend together. Declaration public IList<Unit> Squad { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Unit > Starving Whether this Unit is starving. Starving Units regenerate energy at half the rate they normally would while resting. Declaration public bool Starving { get; protected set; } Property Value Type Description System.Boolean Tile The Tile this Unit is on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile TurnsToDie The number of turns before this Unit dies. This only applies to neutral fresh humans created from combat. Otherwise, 0. Declaration public int TurnsToDie { get; protected set; } Property Value Type Description System.Int32 Methods Attack(Tile) Attacks an adjacent Tile. Costs an action for each Unit in this Unit's squad. Units in the squad without an action don't participate in combat. Units in combat cannot move afterwards. Attacking structures will not give materials. Declaration public bool Attack(Tile tile) Parameters Type Name Description Tile tile The Tile to attack. Returns Type Description System.Boolean True if successfully attacked, false otherwise. ChangeJob(String) Changes this Unit's Job. Must be at max energy (100.0) to change Jobs. Declaration public bool ChangeJob(string job) Parameters Type Name Description System.String job The name of the Job to change to. Returns Type Description System.Boolean True if successfully changed Jobs, false otherwise. Construct(Tile, String) Constructs a Structure on an adjacent Tile. Declaration public bool Construct(Tile tile, string type) Parameters Type Name Description Tile tile The Tile to construct the Structure on. It must have enough materials on it for a Structure to be constructed. System.String type The type of Structure to construct on that Tile. Returns Type Description System.Boolean True if successfully constructed a structure, false otherwise. Convert(Tile) Converts an adjacent Unit to your side. Declaration public bool Convert(Tile tile) Parameters Type Name Description Tile tile The Tile with the Unit to convert. Returns Type Description System.Boolean True if successfully converted, false otherwise. Deconstruct(Tile) Removes materials from an adjacent Tile's Structure. You cannot deconstruct friendly structures (see Unit.attack). Declaration public bool Deconstruct(Tile tile) Parameters Type Name Description Tile tile The Tile to deconstruct. It must have a Structure on it. Returns Type Description System.Boolean True if successfully deconstructed, false otherwise. Drop(Tile, String, Int32) Drops some of the given resource on or adjacent to the Unit's Tile. Does not count as an action. Declaration public bool Drop(Tile tile, string resource, int amount = 0) Parameters Type Name Description Tile tile The Tile to drop materials/food on. System.String resource The type of resource to drop ('material' or 'food'). System.Int32 amount The amount of the resource to drop. Amounts <= 0 will drop as much as possible. Returns Type Description System.Boolean True if successfully dropped the resource, false otherwise. Harvest(Tile) Harvests the food on an adjacent Tile. Declaration public bool Harvest(Tile tile) Parameters Type Name Description Tile tile The Tile you want to harvest. Returns Type Description System.Boolean True if successfully harvested, false otherwise. Move(Tile) Moves this Unit from its current Tile to an adjacent Tile. Declaration public bool Move(Tile tile) Parameters Type Name Description Tile tile The Tile this Unit should move to. Returns Type Description System.Boolean True if it moved, false otherwise. Pickup(Tile, String, Int32) Picks up some materials or food on or adjacent to the Unit's Tile. Does not count as an action. Declaration public bool Pickup(Tile tile, string resource, int amount = 0) Parameters Type Name Description Tile tile The Tile to pickup materials/food from. System.String resource The type of resource to pickup ('material' or 'food'). System.Int32 amount The amount of the resource to pickup. Amounts <= 0 will pickup as much as possible. Returns Type Description System.Boolean True if successfully picked up a resource, false otherwise. Rest() Regenerates energy. Must be in range of a friendly shelter to rest. Costs an action. Units cannot move after resting. Declaration public bool Rest() Returns Type Description System.Boolean True if successfully rested, false otherwise."
  },
  "games/Joueur.cs.Games.Stumped.Tile.html": {
    "href": "games/Joueur.cs.Games.Stumped.Tile.html",
    "title": "Class Tile | C# Joueur Client",
    "keywords": "Class Tile A Tile in the game that makes up the 2D map grid. Inheritance System.Object BaseGameObject GameObject Tile Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class Tile : GameObject Constructors Tile() Creates a new instance of Tile. Used during game initialization, do not call directly. Declaration protected Tile() Properties Beaver The Beaver on this Tile if present, otherwise null. Declaration public Beaver Beaver { get; protected set; } Property Value Type Description Beaver Branches The number of branches dropped on this Tile. Declaration public int Branches { get; protected set; } Property Value Type Description System.Int32 FlowDirection The cardinal direction water is flowing on this Tile ('North', 'East', 'South', 'West'). Declaration public string FlowDirection { get; protected set; } Property Value Type Description System.String Food The number of food dropped on this Tile. Declaration public int Food { get; protected set; } Property Value Type Description System.Int32 LodgeOwner The owner of the Beaver lodge on this Tile, if present, otherwise null. Declaration public Player LodgeOwner { get; protected set; } Property Value Type Description Player Spawner The resource Spawner on this Tile if present, otherwise null. Declaration public Spawner Spawner { get; protected set; } Property Value Type Description Spawner TileEast The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the map. Declaration public Tile TileEast { get; protected set; } Property Value Type Description Tile TileNorth The Tile to the 'North' of this one (x, y-1). Null if out of bounds of the map. Declaration public Tile TileNorth { get; protected set; } Property Value Type Description Tile TileSouth The Tile to the 'South' of this one (x, y+1). Null if out of bounds of the map. Declaration public Tile TileSouth { get; protected set; } Property Value Type Description Tile TileWest The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the map. Declaration public Tile TileWest { get; protected set; } Property Value Type Description Tile Type What type of Tile this is, either 'Water' or 'Land'. Declaration public string Type { get; protected set; } Property Value Type Description System.String X The x (horizontal) position of this Tile. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The y (vertical) position of this Tile. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32 Methods GetNeighbors() Gets the neighbors of this Tile Declaration public List<Tile> GetNeighbors() Returns Type Description System.Collections.Generic.List < Tile > The neighboring (adjacent) Tiles to this tile HasNeighbor(Tile) Checks if this Tile has a specific neighboring Tile Declaration public bool HasNeighbor(Tile tile) Parameters Type Name Description Tile tile Tile to check against Returns Type Description System.Boolean true if the tile is a neighbor of this Tile, false otherwise IsPathable() Checks if a Tile is pathable to units Declaration public bool IsPathable() Returns Type Description System.Boolean True if pathable, false otherwise"
  },
  "games/Joueur.cs.Games.Stumped.Spawner.html": {
    "href": "games/Joueur.cs.Games.Stumped.Spawner.html",
    "title": "Class Spawner | C# Joueur Client",
    "keywords": "Class Spawner A resource spawner that generates branches or food. Inheritance System.Object BaseGameObject GameObject Spawner Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class Spawner : GameObject Constructors Spawner() Creates a new instance of Spawner. Used during game initialization, do not call directly. Declaration protected Spawner() Properties HasBeenHarvested True if this Spawner has been harvested this turn, and it will not heal at the end of the turn, false otherwise. Declaration public bool HasBeenHarvested { get; protected set; } Property Value Type Description System.Boolean Health How much health this Spawner has, which is used to calculate how much of its resource can be harvested. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 Tile The Tile this Spawner is on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile Type What type of resource this is ('food' or 'branches'). Declaration public string Type { get; protected set; } Property Value Type Description System.String"
  },
  "games/Joueur.cs.Games.Stumped.Player.html": {
    "href": "games/Joueur.cs.Games.Stumped.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties Beavers The list of Beavers owned by this Player. Declaration public IList<Beaver> Beavers { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Beaver > BranchesToBuildLodge How many branches are required to build a lodge for this Player. Declaration public int BranchesToBuildLodge { get; protected set; } Property Value Type Description System.Int32 ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Lodges A list of Tiles that contain lodges owned by this player. Declaration public IList<Tile> Lodges { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Tile > Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean"
  },
  "games/Joueur.cs.Games.Stumped.Job.html": {
    "href": "games/Joueur.cs.Games.Stumped.Job.html",
    "title": "Class Job | C# Joueur Client",
    "keywords": "Class Job Information about a beaver's job. Inheritance System.Object BaseGameObject GameObject Job Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Stumped Assembly : joueur-cs.dll Syntax public class Job : GameObject Constructors Job() Creates a new instance of Job. Used during game initialization, do not call directly. Declaration protected Job() Properties Actions The number of actions this Job can make per turn. Declaration public int Actions { get; protected set; } Property Value Type Description System.Int32 CarryLimit How many combined resources a beaver with this Job can hold at once. Declaration public int CarryLimit { get; protected set; } Property Value Type Description System.Int32 Chopping Scalar for how many branches this Job harvests at once. Declaration public int Chopping { get; protected set; } Property Value Type Description System.Int32 Cost How much food this Job costs to recruit. Declaration public int Cost { get; protected set; } Property Value Type Description System.Int32 Damage The amount of damage this Job does per attack. Declaration public int Damage { get; protected set; } Property Value Type Description System.Int32 DistractionPower How many turns a beaver attacked by this Job is distracted by. Declaration public int DistractionPower { get; protected set; } Property Value Type Description System.Int32 Health The amount of starting health this Job has. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 Moves The number of moves this Job can make per turn. Declaration public int Moves { get; protected set; } Property Value Type Description System.Int32 Munching Scalar for how much food this Job harvests at once. Declaration public int Munching { get; protected set; } Property Value Type Description System.Int32 Title The Job title. Declaration public string Title { get; protected set; } Property Value Type Description System.String Methods Recruit(Tile) Recruits a Beaver of this Job to a lodge Declaration public Beaver Recruit(Tile tile) Parameters Type Name Description Tile tile The Tile that is a lodge owned by you that you wish to spawn the Beaver of this Job on. Returns Type Description Beaver The recruited Beaver if successful, null otherwise."
  },
  "games/Joueur.cs.Games.Spiders.html": {
    "href": "games/Joueur.cs.Games.Spiders.html",
    "title": "Namespace Joueur.cs.Games.Spiders | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Spiders Rules There's an infestation of enemy spiders challenging your queen broodmother spider! Protect her and attack the other broodmother in this turn based, node based, game. The full game rules for Spiders can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Spiders. BroodMother The Spider Queen. She alone can spawn Spiderlings for each Player, and if she dies the owner loses. Cutter A Spiderling that can cut existing Webs. Game There's an infestation of enemy spiders challenging your queen broodmother spider! Protect her and attack the other broodmother in this turn based, node based, game. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Nest A location (node) connected to other Nests via Webs (edges) in the game that Spiders can converge on, regardless of owner. Player A player in this game. Every AI controls one player. Spider A Spider in the game. The most basic unit. Spiderling A Spider spawned by the BroodMother. Spitter A Spiderling that creates and spits new Webs from the Nest it is on to another Nest, connecting them. Weaver A Spiderling that can alter existing Webs by weaving to add or remove silk from the Webs, thus altering its strength. Web A connection (edge) to a Nest (node) in the game that Spiders can converge on (regardless of owner). Spiders can travel in either direction on Webs."
  },
  "games/Joueur.cs.Games.Spiders.Game.html": {
    "href": "games/Joueur.cs.Games.Spiders.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game There's an infestation of enemy spiders challenging your queen broodmother spider! Protect her and attack the other broodmother in this turn based, node based, game. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 CutSpeed The speed at which Cutters work to do cut Webs. Declaration public int CutSpeed { get; protected set; } Property Value Type Description System.Int32 EggsScalar Constant used to calculate how many eggs BroodMothers get on their owner's turns. Declaration public double EggsScalar { get; protected set; } Property Value Type Description System.Double InitialWebStrength The starting strength for Webs. Declaration public int InitialWebStrength { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 MovementSpeed The speed at which Spiderlings move on Webs. Declaration public int MovementSpeed { get; protected set; } Property Value Type Description System.Int32 Nests Every Nest in the game. Declaration public IList<Nest> Nests { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Nest > Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String SpitSpeed The speed at which Spitters work to spit new Webs. Declaration public int SpitSpeed { get; protected set; } Property Value Type Description System.Int32 WeavePower How much web strength is added or removed from Webs when they are weaved. Declaration public int WeavePower { get; protected set; } Property Value Type Description System.Int32 WeaveSpeed The speed at which Weavers work to do strengthens and weakens on Webs. Declaration public int WeaveSpeed { get; protected set; } Property Value Type Description System.Int32 Webs Every Web in the game. Declaration public IList<Web> Webs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Web >"
  },
  "games/Joueur.cs.Games.Spiders.Cutter.html": {
    "href": "games/Joueur.cs.Games.Spiders.Cutter.html",
    "title": "Class Cutter | C# Joueur Client",
    "keywords": "Class Cutter A Spiderling that can cut existing Webs. Inheritance System.Object BaseGameObject GameObject Spider Spiderling Cutter Inherited Members Spiderling.Busy Spiderling.MovingOnWeb Spiderling.MovingToNest Spiderling.NumberOfCoworkers Spiderling.WorkRemaining Spiderling.Attack(Spiderling) Spiderling.Move(Web) Spider.IsDead Spider.Nest Spider.Owner GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Cutter : Spiderling Constructors Cutter() Creates a new instance of Cutter. Used during game initialization, do not call directly. Declaration protected Cutter() Properties CuttingWeb The Web that this Cutter is trying to cut. Null if not cutting. Declaration public Web CuttingWeb { get; protected set; } Property Value Type Description Web Methods Cut(Web) Cuts a web, destroying it, and any Spiderlings on it. Declaration public bool Cut(Web web) Parameters Type Name Description Web web The web you want to Cut. Must be connected to the Nest this Cutter is currently on. Returns Type Description System.Boolean True if the cut was successfully started, false otherwise."
  },
  "games/Joueur.cs.Games.Spiders.BroodMother.html": {
    "href": "games/Joueur.cs.Games.Spiders.BroodMother.html",
    "title": "Class BroodMother | C# Joueur Client",
    "keywords": "Class BroodMother The Spider Queen. She alone can spawn Spiderlings for each Player, and if she dies the owner loses. Inheritance System.Object BaseGameObject GameObject Spider BroodMother Inherited Members Spider.IsDead Spider.Nest Spider.Owner GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class BroodMother : Spider Constructors BroodMother() Creates a new instance of BroodMother. Used during game initialization, do not call directly. Declaration protected BroodMother() Properties Eggs How many eggs the BroodMother has to spawn Spiderlings this turn. Declaration public double Eggs { get; protected set; } Property Value Type Description System.Double Health How much health this BroodMother has left. When it reaches 0, she dies and her owner loses. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 Methods Consume(Spiderling) Consumes a Spiderling of the same owner to regain some eggs to spawn more Spiderlings. Declaration public bool Consume(Spiderling spiderling) Parameters Type Name Description Spiderling spiderling The Spiderling to consume. It must be on the same Nest as this BroodMother. Returns Type Description System.Boolean True if the Spiderling was consumed. False otherwise. Spawn(String) Spawns a new Spiderling on the same Nest as this BroodMother, consuming an egg. Declaration public Spiderling Spawn(string spiderlingType) Parameters Type Name Description System.String spiderlingType The string name of the Spiderling class you want to Spawn. Must be 'Spitter', 'Weaver', or 'Cutter'. Returns Type Description Spiderling The newly spwaned Spiderling if successful. Null otherwise."
  },
  "games/Joueur.cs.Games.Saloon.Player.html": {
    "href": "games/Joueur.cs.Games.Saloon.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Cowboys Every Cowboy owned by this Player. Declaration public IList<Cowboy> Cowboys { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Cowboy > Kills How many enemy Cowboys this player's team has killed. Declaration public int Kills { get; protected set; } Property Value Type Description System.Int32 Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String Rowdiness How rowdy their team is. When it gets too high their team takes a collective siesta. Declaration public int Rowdiness { get; protected set; } Property Value Type Description System.Int32 Score How many times their team has played a piano. Declaration public int Score { get; protected set; } Property Value Type Description System.Int32 Siesta 0 when not having a team siesta. When greater than 0 represents how many turns left for the team siesta to complete. Declaration public int Siesta { get; protected set; } Property Value Type Description System.Int32 TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean YoungGun The YoungGun this Player uses to call in new Cowboys. Declaration public YoungGun YoungGun { get; protected set; } Property Value Type Description YoungGun"
  },
  "games/Joueur.cs.Games.Saloon.GameObject.html": {
    "href": "games/Joueur.cs.Games.Saloon.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Bottle Cowboy Furnishing Player Tile YoungGun Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Saloon.Game.html": {
    "href": "games/Joueur.cs.Games.Saloon.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game Use cowboys to have a good time and play some music on a Piano, while brawling with enemy Cowboys. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties BartenderCooldown How many turns a Bartender will be busy for after throwing a Bottle. Declaration public int BartenderCooldown { get; protected set; } Property Value Type Description System.Int32 Bottles All the beer Bottles currently flying across the saloon in the game. Declaration public IList<Bottle> Bottles { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Bottle > BrawlerDamage How much damage is applied to neighboring things bit by the Sharpshooter between turns. Declaration public int BrawlerDamage { get; protected set; } Property Value Type Description System.Int32 Cowboys Every Cowboy in the game. Declaration public IList<Cowboy> Cowboys { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Cowboy > CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 Furnishings Every furnishing in the game. Declaration public IList<Furnishing> Furnishings { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Furnishing > Jobs All the jobs that Cowboys can be called in with. Declaration public IList<string> Jobs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > MapHeight The number of Tiles in the map along the y (vertical) axis. Declaration public int MapHeight { get; protected set; } Property Value Type Description System.Int32 MapWidth The number of Tiles in the map along the x (horizontal) axis. Declaration public int MapWidth { get; protected set; } Property Value Type Description System.Int32 MaxCowboysPerJob The maximum number of Cowboys a Player can bring into the saloon of each specific job. Declaration public int MaxCowboysPerJob { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > RowdinessToSiesta When a player's rowdiness reaches or exceeds this number their Cowboys take a collective siesta. Declaration public int RowdinessToSiesta { get; protected set; } Property Value Type Description System.Int32 Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String SharpshooterDamage How much damage is applied to things hit by Sharpshooters when they act. Declaration public int SharpshooterDamage { get; protected set; } Property Value Type Description System.Int32 SiestaLength How long siestas are for a player's team. Declaration public int SiestaLength { get; protected set; } Property Value Type Description System.Int32 Tiles All the tiles in the map, stored in Row-major order. Use x + y * mapWidth to access the correct index. Declaration public IList<Tile> Tiles { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Tile > TurnsDrunk How many turns a Cowboy will be drunk for if a bottle breaks on it. Declaration public int TurnsDrunk { get; protected set; } Property Value Type Description System.Int32 Methods GetTileAt(Int32, Int32) Gets the Tile at a specified (x, y) position Declaration public Tile GetTileAt(int x, int y) Parameters Type Name Description System.Int32 x integer between 0 and the MapWidth System.Int32 y integer between 0 and the MapHeight Returns Type Description Tile the Tile at (x, y) or null if out of bounds"
  },
  "games/Joueur.cs.Games.Saloon.Furnishing.html": {
    "href": "games/Joueur.cs.Games.Saloon.Furnishing.html",
    "title": "Class Furnishing | C# Joueur Client",
    "keywords": "Class Furnishing An furnishing in the Saloon that must be pathed around, or destroyed. Inheritance System.Object BaseGameObject GameObject Furnishing Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class Furnishing : GameObject Constructors Furnishing() Creates a new instance of Furnishing. Used during game initialization, do not call directly. Declaration protected Furnishing() Properties Health How much health this Furnishing currently has. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 IsDestroyed If this Furnishing has been destroyed, and has been removed from the game. Declaration public bool IsDestroyed { get; protected set; } Property Value Type Description System.Boolean IsPiano True if this Furnishing is a piano and can be played, False otherwise. Declaration public bool IsPiano { get; protected set; } Property Value Type Description System.Boolean IsPlaying If this is a piano and a Cowboy is playing it this turn. Declaration public bool IsPlaying { get; protected set; } Property Value Type Description System.Boolean Tile The Tile that this Furnishing is located on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile"
  },
  "games/Joueur.cs.Games.Saloon.AI.html": {
    "href": "games/Joueur.cs.Games.Saloon.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Saloon. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Checkers.Game.html": {
    "href": "games/Joueur.cs.Games.Checkers.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game The simple version of American Checkers. An 8x8 board with 12 checkers on each side that must move diagonally to the opposing side until kinged. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Checkers Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties BoardHeight The height of the board for the Y component of a checker. Declaration public int BoardHeight { get; protected set; } Property Value Type Description System.Int32 BoardWidth The width of the board for X component of a checker. Declaration public int BoardWidth { get; protected set; } Property Value Type Description System.Int32 CheckerMoved The checker that last moved and must be moved because only one checker can move during each players turn. Declaration public Checker CheckerMoved { get; protected set; } Property Value Type Description Checker CheckerMovedJumped If the last checker that moved jumped, meaning it can move again. Declaration public bool CheckerMovedJumped { get; protected set; } Property Value Type Description System.Boolean Checkers All the checkers currently in the game. Declaration public IList<Checker> Checkers { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Checker > CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String"
  },
  "games/Joueur.cs.Games.Checkers.Checker.html": {
    "href": "games/Joueur.cs.Games.Checkers.Checker.html",
    "title": "Class Checker | C# Joueur Client",
    "keywords": "Class Checker A checker on the game board. Inheritance System.Object BaseGameObject GameObject Checker Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Checkers Assembly : joueur-cs.dll Syntax public class Checker : GameObject Constructors Checker() Creates a new instance of Checker. Used during game initialization, do not call directly. Declaration protected Checker() Properties Kinged If the checker has been kinged and can move backwards. Declaration public bool Kinged { get; protected set; } Property Value Type Description System.Boolean Owner The player that controls this Checker. Declaration public Player Owner { get; protected set; } Property Value Type Description Player X The x coordinate of the checker. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The y coordinate of the checker. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32 Methods IsMine() Returns if the checker is owned by your player or not. Declaration public bool IsMine() Returns Type Description System.Boolean True if it is yours, false if it is not yours. Move(Int32, Int32) Moves the checker from its current location to the given (x, y). Declaration public Checker Move(int x, int y) Parameters Type Name Description System.Int32 x The x coordinate to move to. System.Int32 y The y coordinate to move to. Returns Type Description Checker Returns the same checker that moved if the move was successful. null otherwise."
  },
  "games/Joueur.cs.Games.Checkers.AI.html": {
    "href": "games/Joueur.cs.Games.Checkers.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Checkers. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Checkers Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() GotCaptured(Checker) This is called whenever your checker gets captured (during an opponent's turn). Declaration public void GotCaptured(Checker checker) Parameters Type Name Description Checker checker The checker that was captured. RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Catastrophe.Tile.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.Tile.html",
    "title": "Class Tile | C# Joueur Client",
    "keywords": "Class Tile A Tile in the game that makes up the 2D map grid. Inheritance System.Object BaseGameObject GameObject Tile Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class Tile : GameObject Constructors Tile() Creates a new instance of Tile. Used during game initialization, do not call directly. Declaration protected Tile() Properties Food The number of food dropped on this Tile. Declaration public int Food { get; protected set; } Property Value Type Description System.Int32 HarvestRate The amount of food that can be harvested from this Tile per turn. Declaration public int HarvestRate { get; protected set; } Property Value Type Description System.Int32 Materials The number of materials dropped on this Tile. Declaration public int Materials { get; protected set; } Property Value Type Description System.Int32 Structure The Structure on this Tile if present, otherwise null. Declaration public Structure Structure { get; protected set; } Property Value Type Description Structure TileEast The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the map. Declaration public Tile TileEast { get; protected set; } Property Value Type Description Tile TileNorth The Tile to the 'North' of this one (x, y-1). Null if out of bounds of the map. Declaration public Tile TileNorth { get; protected set; } Property Value Type Description Tile TileSouth The Tile to the 'South' of this one (x, y+1). Null if out of bounds of the map. Declaration public Tile TileSouth { get; protected set; } Property Value Type Description Tile TileWest The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the map. Declaration public Tile TileWest { get; protected set; } Property Value Type Description Tile TurnsToHarvest The amount of turns before this resource can be harvested. Declaration public int TurnsToHarvest { get; protected set; } Property Value Type Description System.Int32 Unit The Unit on this Tile if present, otherwise null. Declaration public Unit Unit { get; protected set; } Property Value Type Description Unit X The x (horizontal) position of this Tile. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The y (vertical) position of this Tile. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32 Methods GetNeighbors() Gets the neighbors of this Tile Declaration public List<Tile> GetNeighbors() Returns Type Description System.Collections.Generic.List < Tile > The neighboring (adjacent) Tiles to this tile HasNeighbor(Tile) Checks if this Tile has a specific neighboring Tile Declaration public bool HasNeighbor(Tile tile) Parameters Type Name Description Tile tile Tile to check against Returns Type Description System.Boolean true if the tile is a neighbor of this Tile, false otherwise IsPathable() Checks if a Tile is pathable to units Declaration public bool IsPathable() Returns Type Description System.Boolean True if pathable, false otherwise"
  },
  "games/Joueur.cs.Games.Catastrophe.Structure.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.Structure.html",
    "title": "Class Structure | C# Joueur Client",
    "keywords": "Class Structure A structure on a Tile. Inheritance System.Object BaseGameObject GameObject Structure Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class Structure : GameObject Constructors Structure() Creates a new instance of Structure. Used during game initialization, do not call directly. Declaration protected Structure() Properties EffectRadius The range of this Structure's effect. For example, a radius of 1 means this Structure affects a 3x3 square centered on this Structure. Declaration public int EffectRadius { get; protected set; } Property Value Type Description System.Int32 Materials The number of materials in this Structure. Once this number reaches 0, this Structure is destroyed. Declaration public int Materials { get; protected set; } Property Value Type Description System.Int32 Owner The owner of this Structure if any, otherwise null. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Tile The Tile this Structure is on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile Type The type of Structure this is ('shelter', 'monument', 'wall', 'road', 'neutral'). Declaration public string Type { get; protected set; } Property Value Type Description System.String"
  },
  "games/Joueur.cs.Games.Catastrophe.GameObject.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Job Player Structure Tile Unit Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Anarchy.Player.html": {
    "href": "games/Joueur.cs.Games.Anarchy.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties BribesRemaining How many bribes this player has remaining to use during their turn. Each action a Building does costs 1 bribe. Any unused bribes are lost at the end of the player's turn. Declaration public int BribesRemaining { get; protected set; } Property Value Type Description System.Int32 Buildings All the buildings owned by this player. Declaration public IList<Building> Buildings { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Building > ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String FireDepartments All the FireDepartments owned by this player. Declaration public IList<FireDepartment> FireDepartments { get; protected set; } Property Value Type Description System.Collections.Generic.IList < FireDepartment > Headquarters The Warehouse that serves as this player's headquarters and has extra health. If this gets destroyed they lose. Declaration public Warehouse Headquarters { get; protected set; } Property Value Type Description Warehouse Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player PoliceDepartments All the PoliceDepartments owned by this player. Declaration public IList<PoliceDepartment> PoliceDepartments { get; protected set; } Property Value Type Description System.Collections.Generic.IList < PoliceDepartment > ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Warehouses All the warehouses owned by this player. Includes the Headquarters. Declaration public IList<Warehouse> Warehouses { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Warehouse > WeatherStations All the WeatherStations owned by this player. Declaration public IList<WeatherStation> WeatherStations { get; protected set; } Property Value Type Description System.Collections.Generic.IList < WeatherStation > Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean"
  },
  "games/Joueur.cs.Games.Anarchy.Forecast.html": {
    "href": "games/Joueur.cs.Games.Anarchy.Forecast.html",
    "title": "Class Forecast | C# Joueur Client",
    "keywords": "Class Forecast The weather effect that will be applied at the end of a turn, which causes fires to spread. Inheritance System.Object BaseGameObject GameObject Forecast Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class Forecast : GameObject Constructors Forecast() Creates a new instance of Forecast. Used during game initialization, do not call directly. Declaration protected Forecast() Properties ControllingPlayer The Player that can use WeatherStations to control this Forecast when its the nextForecast. Declaration public Player ControllingPlayer { get; protected set; } Property Value Type Description Player Direction The direction the wind will blow fires in. Can be 'north', 'east', 'south', or 'west'. Declaration public string Direction { get; protected set; } Property Value Type Description System.String Intensity How much of a Building's fire that can be blown in the direction of this Forecast. Fire is duplicated (copied), not moved (transfered). Declaration public int Intensity { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Anarchy.AI.html": {
    "href": "games/Joueur.cs.Games.Anarchy.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Anarchy. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.ErrorHandler.html": {
    "href": "games/Joueur.cs.ErrorHandler.html",
    "title": "Class ErrorHandler | C# Joueur Client",
    "keywords": "Class ErrorHandler Inheritance System.Object ErrorHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public static class ErrorHandler Methods HandleError(ErrorHandler.ErrorCode, Exception, String) Declaration public static void HandleError(ErrorHandler.ErrorCode code, Exception exception = null, string message = null) Parameters Type Name Description ErrorHandler.ErrorCode code System.Exception exception System.String message HandleError(ErrorHandler.ErrorCode, String) Declaration public static void HandleError(ErrorHandler.ErrorCode code, string message = null) Parameters Type Name Description ErrorHandler.ErrorCode code System.String message"
  },
  "games/Joueur.cs.BaseGameObject.html": {
    "href": "games/Joueur.cs.BaseGameObject.html",
    "title": "Class BaseGameObject | C# Joueur Client",
    "keywords": "Class BaseGameObject Inheritance System.Object BaseGameObject GameObject GameObject GameObject GameObject GameObject GameObject GameObject GameObject Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public abstract class BaseGameObject Properties GameObjectName String representing the top level Class that this game object is an instance of. Used for reflection to create new instances on clients, but exposed for convenience should AIs want this data. Declaration public string GameObjectName { get; protected set; } Property Value Type Description System.String Id A unique identifier for each game object. During any game IDs will never be re-used. Declaration public string Id { get; protected set; } Property Value Type Description System.String Methods ToString() ToString override, useful for debugging Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "games/Joueur.cs.ArgParser.html": {
    "href": "games/Joueur.cs.ArgParser.html",
    "title": "Class ArgParser | C# Joueur Client",
    "keywords": "Class ArgParser Inheritance System.Object ArgParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public class ArgParser Constructors ArgParser(String[], String, ArgParser.Argument[], Int32) Declaration public ArgParser(string[] args, string help, ArgParser.Argument[] arguments, int errorCode = 1) Parameters Type Name Description System.String [] args System.String help ArgParser.Argument [] arguments System.Int32 errorCode Methods CheckRequired() Declaration public void CheckRequired() GetHelp() Declaration public void GetHelp() GetHelpString() Declaration public string GetHelpString() Returns Type Description System.String GetValue<T>(String) Declaration public T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T HasValue(String) Declaration public bool HasValue(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean"
  },
  "games/Joueur.cs.ArgParser.Argument.Store.html": {
    "href": "games/Joueur.cs.ArgParser.Argument.Store.html",
    "title": "Enum ArgParser.Argument.Store | C# Joueur Client",
    "keywords": "Enum ArgParser.Argument.Store Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public enum Store Fields Name Description False True Value"
  },
  "games/index.html": {
    "href": "games/index.html",
    "title": "Games | C# Joueur Client",
    "keywords": "Games These are the games that are available to play via the C# Joueur Client. Their source code is stored in the directory: Games/GAME_NAME/ , where GAME_NAME is the name of the game (with the first letter capitalized). Anarchy Two player grid based game where each player tries to burn down the other player's buildings. Let it burn. Catastrophe Convert as many humans to as you can to survive in this post-apocalyptic wasteland. Checkers The simple version of American Checkers. An 8x8 board with 12 checkers on each side that must move diagonally to the opposing side until kinged. Chess The traditional 8x8 chess board with pieces. Pirates Steal from merchants and become the most infamous pirate. Saloon Use cowboys to have a good time and play some music on a Piano, while brawling with enemy Cowboys. Spiders There's an infestation of enemy spiders challenging your queen broodmother spider! Protect her and attack the other broodmother in this turn based, node based, game. Stumped Gather branches and build up your lodge as beavers fight to survive. Other Notes Modifying non AI files Each class fle inside of Games/GAME_NAME/ , except for your AI.cs should ideally not be modified. They are intended to be read only constructs that hold the state of that object at the point in time you are reading its properties. That being is said, if you really wish to add functionality, such as helper functions, ensure they do not directly modify game state information. Game Logic If you are attempting to figure out how the logic is executed for a game, that code is not here. All cadre game clients are dumb state tracking programs that facilitate IO between a game server and your AI in whatever language you choose. If you wish to get the actual code for a game check in the game server . Its directory structure is similar to most clients (such as this one)."
  },
  "index.html": {
    "href": "index.html",
    "title": "C# Joueur Client | C# Joueur Client",
    "keywords": "C# Joueur Client This is the client for the Cadre AI framework. It can play multiple different games, though you will probably only be interested in one at a time. In general, try to stay out of the Joueur/ folder, it does most of the heavy lifting to play on our game servers. Your AI, and the game objects it manipulates are all in Games/GAME_NAME/ , with your very own AI living in Games/GAME_NAME/ai.cs for you to make smarter. How to Run This client has been tested and confirmed to work on the Missouri S&T Windows machines loaded with Visual Studio 2013/2015, but it can work on your own Windows/Linux/Mac machines if you desire. It will not work on the campus rc##xcs213 Linux machines however, as their version of Mono is out of date. Windows Visual Studio Most C# developers are comfortable with Microsoft's Visual Studio, so we make sure this works easily in VS. Simply installing Visual Studio 2015 or newer as well as the .NET Desktop Development workload installed. With those installed, Just open up the sln file in this repo and build + run it. Note : You'll need to add command line args in visual studio to the project's solution to tell the game server what game you want to play. The args should be: GAME_NAME -s game.siggame.io -r MyOwnGameSession Visual Studio Code / Command Line usage If you instead opt to develop in Visual Studio Code, Atom, or any other development enviroment that requires command line usage, Microsoft's dotnet core has you covered. Simply install it from Microsoft's website and sure the dotnet command works from your favorite terminal, then run: To Build: dotnet restore dotnet build -o build To Run: ./build/joueur-cs GAME_NAME -s game.siggame.io Linux Install dotnet 2.0 ( make sure you install the prerequisites too ) After those dependencies install, to run the client: make ./testRun MyOwnGameSession Other Notes Try not to modify the .csproj file. It is possible that on your Missouri S&T S-Drive this client will not run properly. This is not a fault with the client, but rather the school's S-Drive implementation changing some file permissions during run time. We cannot control this. Instead, we recommend cloning your repo outside the S-Drive and use an SCP program like WinSCP to edit the files in Windows using whatever IDE you want if you want to code in Windows, but compile in Linux. The only file you should ever modify to create your AI is the AI.cs file. All the other files are needed for the game to work. In addition, you should never be creating your own instances of the Game's classes, nor should you ever try to modify their variables. Instead, treat the Game and its members as a read only structure that represents the game state on the game server. You interact with it by calling the game functions."
  },
  "games/Joueur.cs.Games.Saloon.Bottle.html": {
    "href": "games/Joueur.cs.Games.Saloon.Bottle.html",
    "title": "Class Bottle | C# Joueur Client",
    "keywords": "Class Bottle A bottle thrown by a bartender at a Tile. Inheritance System.Object BaseGameObject GameObject Bottle Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class Bottle : GameObject Constructors Bottle() Creates a new instance of Bottle. Used during game initialization, do not call directly. Declaration protected Bottle() Properties Direction The Direction this Bottle is flying and will move to between turns, can be 'North', 'East', 'South', or 'West'. Declaration public string Direction { get; protected set; } Property Value Type Description System.String DrunkDirection The direction any Cowboys hit by this will move, can be 'North', 'East', 'South', or 'West'. Declaration public string DrunkDirection { get; protected set; } Property Value Type Description System.String IsDestroyed True if this Bottle has impacted and has been destroyed (removed from the Game). False if still in the game flying through the saloon. Declaration public bool IsDestroyed { get; protected set; } Property Value Type Description System.Boolean Tile The Tile this bottle is currently flying over. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile"
  },
  "games/Joueur.cs.Games.Catastrophe.Player.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties Cat The overlord cat Unit owned by this Player. Declaration public Unit Cat { get; protected set; } Property Value Type Description Unit ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Food The amount of food owned by this player. Declaration public int Food { get; protected set; } Property Value Type Description System.Int32 Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String Structures Every Structure owned by this Player. Declaration public IList<Structure> Structures { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Structure > TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Units Every Unit owned by this Player. Declaration public IList<Unit> Units { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Unit > Upkeep The total upkeep of every Unit owned by this Player. If there isn't enough food for every Unit, all Units become starved and do not consume food. Declaration public int Upkeep { get; protected set; } Property Value Type Description System.Int32 Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean"
  },
  "games/Joueur.cs.Games.Anarchy.Game.html": {
    "href": "games/Joueur.cs.Games.Anarchy.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game Two player grid based game where each player tries to burn down the other player's buildings. Let it burn. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties BaseBribesPerTurn How many bribes players get at the beginning of their turn, not counting their burned down Buildings. Declaration public int BaseBribesPerTurn { get; protected set; } Property Value Type Description System.Int32 Buildings All the buildings in the game. Declaration public IList<Building> Buildings { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Building > CurrentForecast The current Forecast, which will be applied at the end of the turn. Declaration public Forecast CurrentForecast { get; protected set; } Property Value Type Description Forecast CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 Forecasts All the forecasts in the game, indexed by turn number. Declaration public IList<Forecast> Forecasts { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Forecast > MapHeight The width of the entire map along the vertical (y) axis. Declaration public int MapHeight { get; protected set; } Property Value Type Description System.Int32 MapWidth The width of the entire map along the horizontal (x) axis. Declaration public int MapWidth { get; protected set; } Property Value Type Description System.Int32 MaxFire The maximum amount of fire value for any Building. Declaration public int MaxFire { get; protected set; } Property Value Type Description System.Int32 MaxForecastIntensity The maximum amount of intensity value for any Forecast. Declaration public int MaxForecastIntensity { get; protected set; } Property Value Type Description System.Int32 MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 NextForecast The next Forecast, which will be applied at the end of your opponent's turn. This is also the Forecast WeatherStations can control this turn. Declaration public Forecast NextForecast { get; protected set; } Property Value Type Description Forecast Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String"
  },
  "games/Joueur.cs.Games.Anarchy.Building.html": {
    "href": "games/Joueur.cs.Games.Anarchy.Building.html",
    "title": "Class Building | C# Joueur Client",
    "keywords": "Class Building A basic building. It does nothing besides burn down. Other Buildings inherit from this class. Inheritance System.Object BaseGameObject GameObject Building FireDepartment PoliceDepartment Warehouse WeatherStation Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class Building : GameObject Constructors Building() Creates a new instance of Building. Used during game initialization, do not call directly. Declaration protected Building() Properties Bribed When true this building has already been bribed this turn and cannot be bribed again this turn. Declaration public bool Bribed { get; protected set; } Property Value Type Description System.Boolean BuildingEast The Building directly to the east of this building, or null if not present. Declaration public Building BuildingEast { get; protected set; } Property Value Type Description Building BuildingNorth The Building directly to the north of this building, or null if not present. Declaration public Building BuildingNorth { get; protected set; } Property Value Type Description Building BuildingSouth The Building directly to the south of this building, or null if not present. Declaration public Building BuildingSouth { get; protected set; } Property Value Type Description Building BuildingWest The Building directly to the west of this building, or null if not present. Declaration public Building BuildingWest { get; protected set; } Property Value Type Description Building Fire How much fire is currently burning the building, and thus how much damage it will take at the end of its owner's turn. 0 means no fire. Declaration public int Fire { get; protected set; } Property Value Type Description System.Int32 Health How much health this building currently has. When this reaches 0 the Building has been burned down. Declaration public int Health { get; protected set; } Property Value Type Description System.Int32 IsHeadquarters True if this is the Headquarters of the owning player, false otherwise. Burning this down wins the game for the other Player. Declaration public bool IsHeadquarters { get; protected set; } Property Value Type Description System.Boolean Owner The player that owns this building. If it burns down (health reaches 0) that player gets an additional bribe(s). Declaration public Player Owner { get; protected set; } Property Value Type Description Player X The location of the Building along the x-axis. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The location of the Building along the y-axis. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.BaseAI.html": {
    "href": "games/Joueur.cs.BaseAI.html",
    "title": "Class BaseAI | C# Joueur Client",
    "keywords": "Class BaseAI Inheritance System.Object BaseAI AI AI AI AI AI AI AI AI Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public abstract class BaseAI Constructors BaseAI() Declaration protected BaseAI() Methods Ended(Boolean, String) Declaration public virtual void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won System.String reason GameUpdated() Declaration public virtual void GameUpdated() GetName() Declaration public virtual string GetName() Returns Type Description System.String GetSetting(String) Gets an AI setting passed to the program via the --aiSettings flag.If the flag was set it will be returned as a string value, null otherwise. Declaration public string GetSetting(string key) Parameters Type Name Description System.String key The key of the setting you wish to get the value for Returns Type Description System.String A string representing the value set via command line, or nil if the key was not set Invalid(String) Declaration public virtual void Invalid(string message) Parameters Type Name Description System.String message Start() Declaration public virtual void Start()"
  },
  "games/Joueur.cs.ArgParser.Argument.html": {
    "href": "games/Joueur.cs.ArgParser.Argument.html",
    "title": "Class ArgParser.Argument | C# Joueur Client",
    "keywords": "Class ArgParser.Argument Inheritance System.Object ArgParser.Argument Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public class Argument Constructors Argument(String[], String, String, Boolean, Object, Nullable<ArgParser.Argument.Store>) Declaration public Argument(string[] aliases, string destination, string help, bool required = false, object defaultValue = null, ArgParser.Argument.Store? howToStore = default (ArgParser.Argument.Store? )) Parameters Type Name Description System.String [] aliases System.String destination System.String help System.Boolean required System.Object defaultValue System.Nullable < ArgParser.Argument.Store > howToStore Fields Aliases Declaration public string[] Aliases Field Value Type Description System.String [] Default Declaration public object Default Field Value Type Description System.Object Destination Declaration public string Destination Field Value Type Description System.String Help Declaration public string Help Field Value Type Description System.String HowToStore Declaration public ArgParser.Argument.Store HowToStore Field Value Type Description ArgParser.Argument.Store Required Declaration public bool Required Field Value Type Description System.Boolean"
  },
  "games/Joueur.cs.Games.Spiders.Web.html": {
    "href": "games/Joueur.cs.Games.Spiders.Web.html",
    "title": "Class Web | C# Joueur Client",
    "keywords": "Class Web A connection (edge) to a Nest (node) in the game that Spiders can converge on (regardless of owner). Spiders can travel in either direction on Webs. Inheritance System.Object BaseGameObject GameObject Web Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Web : GameObject Constructors Web() Creates a new instance of Web. Used during game initialization, do not call directly. Declaration protected Web() Properties Length How long this Web is, i.e., the distance between its nestA and nestB. Declaration public double Length { get; protected set; } Property Value Type Description System.Double Load How much weight this Web currently has on it, which is the sum of all its Spiderlings weight. Declaration public int Load { get; protected set; } Property Value Type Description System.Int32 NestA The first Nest this Web is connected to. Declaration public Nest NestA { get; protected set; } Property Value Type Description Nest NestB The second Nest this Web is connected to. Declaration public Nest NestB { get; protected set; } Property Value Type Description Nest Spiderlings All the Spiderlings currently moving along this Web. Declaration public IList<Spiderling> Spiderlings { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Spiderling > Strength How much weight this Web can take before snapping and destroying itself and all the Spiders on it. Declaration public int Strength { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Pirates.Unit.html": {
    "href": "games/Joueur.cs.Games.Pirates.Unit.html",
    "title": "Class Unit | C# Joueur Client",
    "keywords": "Class Unit A unit group in the game. This may consist of a ship and any number of crew. Inheritance System.Object BaseGameObject GameObject Unit Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class Unit : GameObject Constructors Unit() Creates a new instance of Unit. Used during game initialization, do not call directly. Declaration protected Unit() Properties Acted Whether this Unit has performed its action this turn. Declaration public bool Acted { get; protected set; } Property Value Type Description System.Boolean Crew How many crew are on this Tile. This number will always be <= crewHealth. Declaration public int Crew { get; protected set; } Property Value Type Description System.Int32 CrewHealth How much total health the crew on this Tile have. Declaration public int CrewHealth { get; protected set; } Property Value Type Description System.Int32 Gold How much gold this Unit is carrying. Declaration public int Gold { get; protected set; } Property Value Type Description System.Int32 Moves How many more times this Unit may move this turn. Declaration public int Moves { get; protected set; } Property Value Type Description System.Int32 Owner The Player that owns and can control this Unit, or null if the Unit is neutral. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Path (Merchants only) The path this Unit will follow. The first element is the Tile this Unit will move to next. Declaration public IList<Tile> Path { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Tile > ShipHealth If a ship is on this Tile, how much health it has remaining. 0 for no ship. Declaration public int ShipHealth { get; protected set; } Property Value Type Description System.Int32 StunTurns (Merchants only) The number of turns this merchant ship won't be able to move. They will still attack. Merchant ships are stunned when they're attacked. Declaration public int StunTurns { get; protected set; } Property Value Type Description System.Int32 TargetPort (Merchants only) The Port this Unit is moving to. Declaration public Port TargetPort { get; protected set; } Property Value Type Description Port Tile The Tile this Unit is on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile Methods Attack(Tile, String) Attacks either the 'crew' or 'ship' on a Tile in range. Declaration public bool Attack(Tile tile, string target) Parameters Type Name Description Tile tile The Tile to attack. System.String target Whether to attack 'crew' or 'ship'. Crew deal damage to crew and ships deal damage to ships. Consumes any remaining moves. Returns Type Description System.Boolean True if successfully attacked, false otherwise. Bury(Int32) Buries gold on this Unit's Tile. Gold must be a certain distance away for it to get interest (Game.minInterestDistance). Declaration public bool Bury(int amount) Parameters Type Name Description System.Int32 amount How much gold this Unit should bury. Amounts <= 0 will bury as much as possible. Returns Type Description System.Boolean True if successfully buried, false otherwise. Deposit(Int32) Puts gold into an adjacent Port. If that Port is the Player's port, the gold is added to that Player. If that Port is owned by merchants, it adds to that Port's investment. Declaration public bool Deposit(int amount = 0) Parameters Type Name Description System.Int32 amount The amount of gold to deposit. Amounts <= 0 will deposit all the gold on this Unit. Returns Type Description System.Boolean True if successfully deposited, false otherwise. Dig(Int32) Digs up gold on this Unit's Tile. Declaration public bool Dig(int amount = 0) Parameters Type Name Description System.Int32 amount How much gold this Unit should take. Amounts <= 0 will dig up as much as possible. Returns Type Description System.Boolean True if successfully dug up, false otherwise. Move(Tile) Moves this Unit from its current Tile to an adjacent Tile. If this Unit merges with another one, the other Unit will be destroyed and its tile will be set to null. Make sure to check that your Unit's tile is not null before doing things with it. Declaration public bool Move(Tile tile) Parameters Type Name Description Tile tile The Tile this Unit should move to. Returns Type Description System.Boolean True if it moved, false otherwise. Rest() Regenerates this Unit's health. Must be used in range of a port. Declaration public bool Rest() Returns Type Description System.Boolean True if successfully rested, false otherwise. Split(Tile, Int32, Int32) Moves a number of crew from this Unit to the given Tile. This will consume a move from those crew. Declaration public bool Split(Tile tile, int amount = 1, int gold = 0) Parameters Type Name Description Tile tile The Tile to move the crew to. System.Int32 amount The number of crew to move onto that Tile. Amount <= 0 will move all the crew to that Tile. System.Int32 gold The amount of gold the crew should take with them. Gold < 0 will move all the gold to that Tile. Returns Type Description System.Boolean True if successfully split, false otherwise. Withdraw(Int32) Takes gold from the Player. You can only withdraw from your own Port. Declaration public bool Withdraw(int amount = 0) Parameters Type Name Description System.Int32 amount The amount of gold to withdraw. Amounts <= 0 will withdraw everything. Returns Type Description System.Boolean True if successfully withdrawn, false otherwise."
  },
  "games/Joueur.cs.Games.Pirates.Tile.html": {
    "href": "games/Joueur.cs.Games.Pirates.Tile.html",
    "title": "Class Tile | C# Joueur Client",
    "keywords": "Class Tile A Tile in the game that makes up the 2D map grid. Inheritance System.Object BaseGameObject GameObject Tile Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class Tile : GameObject Constructors Tile() Creates a new instance of Tile. Used during game initialization, do not call directly. Declaration protected Tile() Properties Decoration (Visualizer only) Whether this tile is deep sea or grassy. This has no effect on gameplay, but feel free to use it if you want. Declaration public bool Decoration { get; protected set; } Property Value Type Description System.Boolean Gold The amount of gold buried on this tile. Declaration public int Gold { get; protected set; } Property Value Type Description System.Int32 Port The Port on this Tile if present, otherwise null. Declaration public Port Port { get; protected set; } Property Value Type Description Port TileEast The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the map. Declaration public Tile TileEast { get; protected set; } Property Value Type Description Tile TileNorth The Tile to the 'North' of this one (x, y-1). Null if out of bounds of the map. Declaration public Tile TileNorth { get; protected set; } Property Value Type Description Tile TileSouth The Tile to the 'South' of this one (x, y+1). Null if out of bounds of the map. Declaration public Tile TileSouth { get; protected set; } Property Value Type Description Tile TileWest The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the map. Declaration public Tile TileWest { get; protected set; } Property Value Type Description Tile Type The type of Tile this is ('water' or 'land'). Declaration public string Type { get; protected set; } Property Value Type Description System.String Unit The Unit on this Tile if present, otherwise null. Declaration public Unit Unit { get; protected set; } Property Value Type Description Unit X The x (horizontal) position of this Tile. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The y (vertical) position of this Tile. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32 Methods GetNeighbors() Gets the neighbors of this Tile Declaration public List<Tile> GetNeighbors() Returns Type Description System.Collections.Generic.List < Tile > The neighboring (adjacent) Tiles to this tile HasNeighbor(Tile) Checks if this Tile has a specific neighboring Tile Declaration public bool HasNeighbor(Tile tile) Parameters Type Name Description Tile tile Tile to check against Returns Type Description System.Boolean true if the tile is a neighbor of this Tile, false otherwise IsPathable() Checks if a Tile is pathable to units Declaration public bool IsPathable() Returns Type Description System.Boolean True if pathable, false otherwise"
  },
  "games/Joueur.cs.Games.Chess.Game.html": {
    "href": "games/Joueur.cs.Games.Chess.Game.html",
    "title": "Class Game | C# Joueur Client",
    "keywords": "Class Game The traditional 8x8 chess board with pieces. Inheritance System.Object BaseGame Game Inherited Members BaseGame.GameObjects BaseGame.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Chess Assembly : joueur-cs.dll Syntax public class Game : BaseGame Constructors Game() Creates a new instance of Game. Used during game initialization, do not call directly. Declaration protected Game() Properties CurrentPlayer The player whose turn it is currently. That player can send commands. Other players cannot. Declaration public Player CurrentPlayer { get; protected set; } Property Value Type Description Player CurrentTurn The current turn number, starting at 0 for the first player's turn. Declaration public int CurrentTurn { get; protected set; } Property Value Type Description System.Int32 Fen Forsythâ€“Edwards Notation, a notation that describes the game board. Declaration public string Fen { get; protected set; } Property Value Type Description System.String MaxTurns The maximum number of turns before the game will automatically end. Declaration public int MaxTurns { get; protected set; } Property Value Type Description System.Int32 Moves The list of Moves that have occurred, in order. Declaration public IList<Move> Moves { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Move > Pieces All the uncaptured Pieces in the game. Declaration public IList<Piece> Pieces { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Piece > Players List of all the players in the game. Declaration public IList<Player> Players { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Player > Session A unique identifier for the game instance that is being played. Declaration public string Session { get; protected set; } Property Value Type Description System.String TurnsToDraw How many turns until the game ends because no pawn has moved and no Piece has been taken. Declaration public int TurnsToDraw { get; protected set; } Property Value Type Description System.Int32"
  },
  "games/Joueur.cs.Games.Chess.AI.html": {
    "href": "games/Joueur.cs.Games.Chess.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Chess. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Chess Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Checkers.GameObject.html": {
    "href": "games/Joueur.cs.Games.Checkers.GameObject.html",
    "title": "Class GameObject | C# Joueur Client",
    "keywords": "Class GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Inheritance System.Object BaseGameObject GameObject Checker Player Inherited Members BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Checkers Assembly : joueur-cs.dll Syntax public class GameObject : BaseGameObject Constructors GameObject() Creates a new instance of GameObject. Used during game initialization, do not call directly. Declaration protected GameObject() Properties Logs Any strings logged will be stored here. Intended for debugging. Declaration public IList<string> Logs { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Log(String) Adds a message to this GameObject's logs. Intended for your own debugging purposes, as strings stored here are saved in the gamelog. Declaration public void Log(string message) Parameters Type Name Description System.String message A string to add to this GameObject's log. Intended for debugging."
  },
  "games/Joueur.cs.Games.Catastrophe.AI.html": {
    "href": "games/Joueur.cs.Games.Catastrophe.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Catastrophe. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Catastrophe Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Anarchy.html": {
    "href": "games/Joueur.cs.Games.Anarchy.html",
    "title": "Namespace Joueur.cs.Games.Anarchy | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Anarchy Rules Two player grid based game where each player tries to burn down the other player's buildings. Let it burn. The full game rules for Anarchy can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Anarchy. Building A basic building. It does nothing besides burn down. Other Buildings inherit from this class. FireDepartment Can put out fires completely. Forecast The weather effect that will be applied at the end of a turn, which causes fires to spread. Game Two player grid based game where each player tries to burn down the other player's buildings. Let it burn. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Player A player in this game. Every AI controls one player. PoliceDepartment Used to keep cities under control and raid Warehouses. Warehouse A typical abandoned warehouse... that anarchists hang out in and can be bribed to burn down Buildings. WeatherStation Can be bribed to change the next Forecast in some way."
  },
  "games/Joueur.cs.Games.Anarchy.PoliceDepartment.html": {
    "href": "games/Joueur.cs.Games.Anarchy.PoliceDepartment.html",
    "title": "Class PoliceDepartment | C# Joueur Client",
    "keywords": "Class PoliceDepartment Used to keep cities under control and raid Warehouses. Inheritance System.Object BaseGameObject GameObject Building PoliceDepartment Inherited Members Building.Bribed Building.BuildingEast Building.BuildingNorth Building.BuildingSouth Building.BuildingWest Building.Fire Building.Health Building.IsHeadquarters Building.Owner Building.X Building.Y GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class PoliceDepartment : Building Constructors PoliceDepartment() Creates a new instance of PoliceDepartment. Used during game initialization, do not call directly. Declaration protected PoliceDepartment() Methods Raid(Warehouse) Bribe the police to raid a Warehouse, dealing damage equal based on the Warehouse's current exposure, and then resetting it to 0. Declaration public int Raid(Warehouse warehouse) Parameters Type Name Description Warehouse warehouse The warehouse you want to raid. Returns Type Description System.Int32 The amount of damage dealt to the warehouse, or -1 if there was an error."
  },
  "games/Joueur.cs.Games.Anarchy.FireDepartment.html": {
    "href": "games/Joueur.cs.Games.Anarchy.FireDepartment.html",
    "title": "Class FireDepartment | C# Joueur Client",
    "keywords": "Class FireDepartment Can put out fires completely. Inheritance System.Object BaseGameObject GameObject Building FireDepartment Inherited Members Building.Bribed Building.BuildingEast Building.BuildingNorth Building.BuildingSouth Building.BuildingWest Building.Fire Building.Health Building.IsHeadquarters Building.Owner Building.X Building.Y GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Anarchy Assembly : joueur-cs.dll Syntax public class FireDepartment : Building Constructors FireDepartment() Creates a new instance of FireDepartment. Used during game initialization, do not call directly. Declaration protected FireDepartment() Properties FireExtinguished The amount of fire removed from a building when bribed to extinguish a building. Declaration public int FireExtinguished { get; protected set; } Property Value Type Description System.Int32 Methods Extinguish(Building) Bribes this FireDepartment to extinguish the some of the fire in a building. Declaration public bool Extinguish(Building building) Parameters Type Name Description Building building The Building you want to extinguish. Returns Type Description System.Boolean True if the bribe worked, false otherwise."
  },
  "games/Joueur.cs.Games.Spiders.AI.html": {
    "href": "games/Joueur.cs.Games.Spiders.AI.html",
    "title": "Class AI | C# Joueur Client",
    "keywords": "Class AI This is where you build your AI for Spiders. Inheritance System.Object BaseAI AI Inherited Members BaseAI.Invalid(String) BaseAI.GetSetting(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class AI : BaseAI Fields Game This is the Game object itself. It contains all the information about the current game. Declaration public readonly Game Game Field Value Type Description Game Player This is your AI's player. It contains all the information about your player's state. Declaration public readonly Player Player Field Value Type Description Player Methods Ended(Boolean, String) This is automatically called when the game ends. Declaration public override void Ended(bool won, string reason) Parameters Type Name Description System.Boolean won True if your player won, false otherwise System.String reason A string explaining why you won or lost Overrides BaseAI.Ended(Boolean, String) Remarks You can do any cleanup of you AI here, or do custom logging. After this function returns, the application will close. GameUpdated() This is automatically called every time the game (or anything in it) updates. Declaration public override void GameUpdated() Overrides BaseAI.GameUpdated() Remarks If a function you call triggers an update, this will be called before that function returns. GetName() This returns your AI's name to the game server. Just replace the string. Declaration public override string GetName() Returns Type Description System.String Your AI's name Overrides BaseAI.GetName() RunTurn() This is called every time it is this AI.player's turn. Declaration public bool RunTurn() Returns Type Description System.Boolean Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function. Start() This is automatically called when the game first starts, once the Game and all GameObjects have been initialized, but before any players do anything. Declaration public override void Start() Overrides BaseAI.Start() Remarks This is a good place to initialize any variables you add to your AI or start tracking game objects."
  },
  "games/Joueur.cs.Games.Saloon.html": {
    "href": "games/Joueur.cs.Games.Saloon.html",
    "title": "Namespace Joueur.cs.Games.Saloon | C# Joueur Client",
    "keywords": "Namespace Joueur.cs.Games.Saloon Rules Use cowboys to have a good time and play some music on a Piano, while brawling with enemy Cowboys. The full game rules for Saloon can be found on GitHub . Additional materials, such as the story and game template can be found on GitHub as well. Classes AI This is where you build your AI for Saloon. Bottle A bottle thrown by a bartender at a Tile. Cowboy A person on the map that can move around and interact within the saloon. Furnishing An furnishing in the Saloon that must be pathed around, or destroyed. Game Use cowboys to have a good time and play some music on a Piano, while brawling with enemy Cowboys. GameObject An object in the game. The most basic class that all game classes should inherit from automatically. Player A player in this game. Every AI controls one player. Tile A Tile in the game that makes up the 2D map grid. YoungGun An eager young person that wants to join your gang, and will call in the veteran Cowboys you need to win the brawl in the saloon."
  },
  "games/Joueur.cs.Games.Saloon.YoungGun.html": {
    "href": "games/Joueur.cs.Games.Saloon.YoungGun.html",
    "title": "Class YoungGun | C# Joueur Client",
    "keywords": "Class YoungGun An eager young person that wants to join your gang, and will call in the veteran Cowboys you need to win the brawl in the saloon. Inheritance System.Object BaseGameObject GameObject YoungGun Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class YoungGun : GameObject Constructors YoungGun() Creates a new instance of YoungGun. Used during game initialization, do not call directly. Declaration protected YoungGun() Properties CallInTile The Tile that a Cowboy will be called in on if this YoungGun calls in a Cowboy. Declaration public Tile CallInTile { get; protected set; } Property Value Type Description Tile CanCallIn True if the YoungGun can call in a Cowboy, false otherwise. Declaration public bool CanCallIn { get; protected set; } Property Value Type Description System.Boolean Owner The Player that owns and can control this YoungGun. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Tile The Tile this YoungGun is currently on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile Methods CallIn(String) Tells the YoungGun to call in a new Cowboy of the given job to the open Tile nearest to them. Declaration public Cowboy CallIn(string job) Parameters Type Name Description System.String job The job you want the Cowboy being brought to have. Returns Type Description Cowboy The new Cowboy that was called in if valid. They will not be added to any cowboys lists until the turn ends. Null otherwise."
  },
  "games/Joueur.cs.Games.Saloon.Tile.html": {
    "href": "games/Joueur.cs.Games.Saloon.Tile.html",
    "title": "Class Tile | C# Joueur Client",
    "keywords": "Class Tile A Tile in the game that makes up the 2D map grid. Inheritance System.Object BaseGameObject GameObject Tile Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Saloon Assembly : joueur-cs.dll Syntax public class Tile : GameObject Constructors Tile() Creates a new instance of Tile. Used during game initialization, do not call directly. Declaration protected Tile() Properties Bottle The beer Bottle currently flying over this Tile. Declaration public Bottle Bottle { get; protected set; } Property Value Type Description Bottle Cowboy The Cowboy that is on this Tile, null otherwise. Declaration public Cowboy Cowboy { get; protected set; } Property Value Type Description Cowboy Furnishing The furnishing that is on this Tile, null otherwise. Declaration public Furnishing Furnishing { get; protected set; } Property Value Type Description Furnishing HasHazard If this Tile is pathable, but has a hazard that damages Cowboys that path through it. Declaration public bool HasHazard { get; protected set; } Property Value Type Description System.Boolean IsBalcony If this Tile is a balcony of the Saloon that YoungGuns walk around on, and can never be pathed through by Cowboys. Declaration public bool IsBalcony { get; protected set; } Property Value Type Description System.Boolean TileEast The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the map. Declaration public Tile TileEast { get; protected set; } Property Value Type Description Tile TileNorth The Tile to the 'North' of this one (x, y-1). Null if out of bounds of the map. Declaration public Tile TileNorth { get; protected set; } Property Value Type Description Tile TileSouth The Tile to the 'South' of this one (x, y+1). Null if out of bounds of the map. Declaration public Tile TileSouth { get; protected set; } Property Value Type Description Tile TileWest The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the map. Declaration public Tile TileWest { get; protected set; } Property Value Type Description Tile X The x (horizontal) position of this Tile. Declaration public int X { get; protected set; } Property Value Type Description System.Int32 Y The y (vertical) position of this Tile. Declaration public int Y { get; protected set; } Property Value Type Description System.Int32 YoungGun The YoungGun on this tile, null otherwise. Declaration public YoungGun YoungGun { get; protected set; } Property Value Type Description YoungGun Methods GetNeighbors() Gets the neighbors of this Tile Declaration public List<Tile> GetNeighbors() Returns Type Description System.Collections.Generic.List < Tile > The neighboring (adjacent) Tiles to this tile HasNeighbor(Tile) Checks if this Tile has a specific neighboring Tile Declaration public bool HasNeighbor(Tile tile) Parameters Type Name Description Tile tile Tile to check against Returns Type Description System.Boolean true if the tile is a neighbor of this Tile, false otherwise IsPathable() Checks if a Tile is pathable to units Declaration public bool IsPathable() Returns Type Description System.Boolean True if pathable, false otherwise"
  },
  "games/Joueur.cs.Games.Pirates.Port.html": {
    "href": "games/Joueur.cs.Games.Pirates.Port.html",
    "title": "Class Port | C# Joueur Client",
    "keywords": "Class Port A port on a Tile. Inheritance System.Object BaseGameObject GameObject Port Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class Port : GameObject Constructors Port() Creates a new instance of Port. Used during game initialization, do not call directly. Declaration protected Port() Properties Gold For players, how much more gold this Port can spend this turn. For merchants, how much gold this Port has accumulated (it will spawn a ship when the Port can afford one). Declaration public int Gold { get; protected set; } Property Value Type Description System.Int32 Investment (Merchants only) How much gold was invested into this Port. Investment determines the strength and value of the next ship. Declaration public int Investment { get; protected set; } Property Value Type Description System.Int32 Owner The owner of this Port, or null if owned by merchants. Declaration public Player Owner { get; protected set; } Property Value Type Description Player Tile The Tile this Port is on. Declaration public Tile Tile { get; protected set; } Property Value Type Description Tile Methods Spawn(String) Spawn a Unit on this port. Declaration public bool Spawn(string type) Parameters Type Name Description System.String type What type of Unit to create ('crew' or 'ship'). Returns Type Description System.Boolean True if Unit was created successfully, false otherwise."
  },
  "games/Joueur.cs.Games.Pirates.Player.html": {
    "href": "games/Joueur.cs.Games.Pirates.Player.html",
    "title": "Class Player | C# Joueur Client",
    "keywords": "Class Player A player in this game. Every AI controls one player. Inheritance System.Object BaseGameObject GameObject Player Inherited Members GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Pirates Assembly : joueur-cs.dll Syntax public class Player : GameObject Constructors Player() Creates a new instance of Player. Used during game initialization, do not call directly. Declaration protected Player() Properties ClientType What type of client this is, e.g. 'Python', 'JavaScript', or some other language. For potential data mining purposes. Declaration public string ClientType { get; protected set; } Property Value Type Description System.String Gold The amount of gold this Player has in reserve. Declaration public int Gold { get; protected set; } Property Value Type Description System.Int32 Infamy The amount of infamy this Player has. Declaration public int Infamy { get; protected set; } Property Value Type Description System.Int32 Lost If the player lost the game or not. Declaration public bool Lost { get; protected set; } Property Value Type Description System.Boolean Name The name of the player. Declaration public string Name { get; protected set; } Property Value Type Description System.String Opponent This player's opponent in the game. Declaration public Player Opponent { get; protected set; } Property Value Type Description Player Port The Port owned by this Player. Declaration public Port Port { get; protected set; } Property Value Type Description Port ReasonLost The reason why the player lost the game. Declaration public string ReasonLost { get; protected set; } Property Value Type Description System.String ReasonWon The reason why the player won the game. Declaration public string ReasonWon { get; protected set; } Property Value Type Description System.String TimeRemaining The amount of time (in ns) remaining for this AI to send commands. Declaration public double TimeRemaining { get; protected set; } Property Value Type Description System.Double Units Every Unit owned by this Player. Declaration public IList<Unit> Units { get; protected set; } Property Value Type Description System.Collections.Generic.IList < Unit > Won If the player won the game or not. Declaration public bool Won { get; protected set; } Property Value Type Description System.Boolean"
  },
  "games/Joueur.cs.GameManager.html": {
    "href": "games/Joueur.cs.GameManager.html",
    "title": "Class GameManager | C# Joueur Client",
    "keywords": "Class GameManager Inheritance System.Object GameManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public class GameManager Constructors GameManager(BaseGame, BaseAI) Declaration public GameManager(BaseGame game, BaseAI ai) Parameters Type Name Description BaseGame game BaseAI ai Methods CSharpCase(String) Declaration public string CSharpCase(string str) Parameters Type Name Description System.String str Returns Type Description System.String DeltaUpdate(JObject) Declaration public void DeltaUpdate(JObject delta) Parameters Type Name Description Newtonsoft.Json.Linq.JObject delta GetValueFromJToken<T>(JToken) Declaration public T GetValueFromJToken<T>(JToken jtoken) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken Returns Type Description T Type Parameters Name Description T SerializeGameObject(BaseGameObject) Declaration public Dictionary<string, string> SerializeGameObject(BaseGameObject baseGameObject) Parameters Type Name Description BaseGameObject baseGameObject Returns Type Description System.Collections.Generic.Dictionary < System.String , System.String > SerializeSafe(Object) Declaration public object SerializeSafe(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Object SetConstants(IDictionary<String, String>) Declaration public void SetConstants(IDictionary<string, string> constants) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > constants Unserialize(JToken) Declaration public object Unserialize(JToken jtoken) Parameters Type Name Description Newtonsoft.Json.Linq.JToken jtoken Returns Type Description System.Object"
  },
  "games/Joueur.cs.Client.html": {
    "href": "games/Joueur.cs.Client.html",
    "title": "Class Client | C# Joueur Client",
    "keywords": "Class Client Inheritance System.Object Client Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Joueur.cs Assembly : joueur-cs.dll Syntax public sealed class Client Fields GameManager Declaration public GameManager GameManager Field Value Type Description GameManager Properties Hostname Declaration public string Hostname { get; } Property Value Type Description System.String Instance Declaration public static Client Instance { get; } Property Value Type Description Client Port Declaration public int Port { get; } Property Value Type Description System.Int32 PrintIO Declaration public bool PrintIO { get; } Property Value Type Description System.Boolean Methods Connect(String, Int32, Boolean) Declaration public void Connect(string hostname = \"127.0.0.1\", int port = 3000, bool printIO = false) Parameters Type Name Description System.String hostname System.Int32 port System.Boolean printIO Disconnect() Declaration public void Disconnect() Play() Declaration public void Play() Send(String, Object) Declaration public void Send(string eventName, object data) Parameters Type Name Description System.String eventName System.Object data Setup(BaseGame, BaseAI) Declaration public void Setup(BaseGame game, BaseAI ai) Parameters Type Name Description BaseGame game BaseAI ai WaitForEvent(String) Declaration public object WaitForEvent(string eventName) Parameters Type Name Description System.String eventName Returns Type Description System.Object"
  },
  "games/Joueur.cs.Games.Spiders.Weaver.html": {
    "href": "games/Joueur.cs.Games.Spiders.Weaver.html",
    "title": "Class Weaver | C# Joueur Client",
    "keywords": "Class Weaver A Spiderling that can alter existing Webs by weaving to add or remove silk from the Webs, thus altering its strength. Inheritance System.Object BaseGameObject GameObject Spider Spiderling Weaver Inherited Members Spiderling.Busy Spiderling.MovingOnWeb Spiderling.MovingToNest Spiderling.NumberOfCoworkers Spiderling.WorkRemaining Spiderling.Attack(Spiderling) Spiderling.Move(Web) Spider.IsDead Spider.Nest Spider.Owner GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Weaver : Spiderling Constructors Weaver() Creates a new instance of Weaver. Used during game initialization, do not call directly. Declaration protected Weaver() Properties StrengtheningWeb The Web that this Weaver is strengthening. Null if not strengthening. Declaration public Web StrengtheningWeb { get; protected set; } Property Value Type Description Web WeakeningWeb The Web that this Weaver is weakening. Null if not weakening. Declaration public Web WeakeningWeb { get; protected set; } Property Value Type Description Web Methods Strengthen(Web) Weaves more silk into an existing Web to strengthen it. Declaration public bool Strengthen(Web web) Parameters Type Name Description Web web The web you want to strengthen. Must be connected to the Nest this Weaver is currently on. Returns Type Description System.Boolean True if the strengthen was successfully started, false otherwise. Weaken(Web) Weaves more silk into an existing Web to strengthen it. Declaration public bool Weaken(Web web) Parameters Type Name Description Web web The web you want to weaken. Must be connected to the Nest this Weaver is currently on. Returns Type Description System.Boolean True if the weaken was successfully started, false otherwise."
  },
  "games/Joueur.cs.Games.Spiders.Spitter.html": {
    "href": "games/Joueur.cs.Games.Spiders.Spitter.html",
    "title": "Class Spitter | C# Joueur Client",
    "keywords": "Class Spitter A Spiderling that creates and spits new Webs from the Nest it is on to another Nest, connecting them. Inheritance System.Object BaseGameObject GameObject Spider Spiderling Spitter Inherited Members Spiderling.Busy Spiderling.MovingOnWeb Spiderling.MovingToNest Spiderling.NumberOfCoworkers Spiderling.WorkRemaining Spiderling.Attack(Spiderling) Spiderling.Move(Web) Spider.IsDead Spider.Nest Spider.Owner GameObject.Logs GameObject.Log(String) BaseGameObject.Id BaseGameObject.GameObjectName BaseGameObject.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Joueur.cs.Games.Spiders Assembly : joueur-cs.dll Syntax public class Spitter : Spiderling Constructors Spitter() Creates a new instance of Spitter. Used during game initialization, do not call directly. Declaration protected Spitter() Properties SpittingWebToNest The Nest that this Spitter is creating a Web to spit at, thus connecting them. Null if not spitting. Declaration public Nest SpittingWebToNest { get; protected set; } Property Value Type Description Nest Methods Spit(Nest) Creates and spits a new Web from the Nest the Spitter is on to another Nest, connecting them. Declaration public bool Spit(Nest nest) Parameters Type Name Description Nest nest The Nest you want to spit a Web to, thus connecting that Nest and the one the Spitter is on. Returns Type Description System.Boolean True if the spit was successful, false otherwise."
  }
}